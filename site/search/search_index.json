{"config":{"lang":["en","ja","zh"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"logkiss","text":"<p>logkiss is a simple and beautiful Python logging library.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Colorful Log Output - Improved visibility with color-coded log levels</li> <li>Simple API - Easy-to-use API compatible with standard Python logging</li> <li>Cloud Ready - Support for AWS CloudWatch and Google Cloud Logging</li> <li>Customizable - Easily customize colors and formats</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>import logkiss as logging\n\n# Get a logger\nlogger = logging.getLogger(__name__)\n\n# Log output\nlogger.debug(\"Debug message\")\nlogger.info(\"Info message\")\nlogger.warning(\"Warning message\")\nlogger.error(\"Error message\")\nlogger.critical(\"Critical error message\")\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install logkiss\n</code></pre> <p>To use cloud logging features:</p> <pre><code>pip install \"logkiss[cloud]\"\n</code></pre>"},{"location":"#license","title":"License","text":"<p>Distributed under the MIT License. See the LICENSE file for details.</p>"},{"location":"contributing/","title":"\u8ca2\u732e\u30ac\u30a4\u30c9","text":"<p>logkiss\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3078\u306e\u8ca2\u732e\u306b\u8208\u5473\u3092\u304a\u6301\u3061\u3044\u305f\u3060\u304d\u3001\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff01\u3053\u306e\u30ac\u30a4\u30c9\u3067\u306f\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u8ca2\u732e\u3059\u308b\u305f\u3081\u306e\u65b9\u6cd5\u3092\u8aac\u660e\u3057\u307e\u3059\u3002</p>"},{"location":"contributing/#_2","title":"\u958b\u767a\u74b0\u5883\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7","text":"<ol> <li>\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u30af\u30ed\u30fc\u30f3\u3057\u307e\u3059\uff1a</li> </ol> <pre><code>git clone https://github.com/yourusername/logkiss.git\ncd logkiss\n</code></pre> <ol> <li>\u958b\u767a\u74b0\u5883\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3057\u307e\u3059\uff1a</li> </ol> <pre><code># PDM\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\npdm install -d\n\n# Poetry\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\npoetry install\n</code></pre>"},{"location":"contributing/#_3","title":"\u30c6\u30b9\u30c8\u306e\u5b9f\u884c","text":"<p>\u5909\u66f4\u3092\u52a0\u3048\u308b\u524d\u306b\u3001\u65e2\u5b58\u306e\u30c6\u30b9\u30c8\u304c\u901a\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\uff1a</p> <pre><code># PDM\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\npdm run pytest\n\n# Poetry\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\npoetry run pytest\n</code></pre>"},{"location":"contributing/#_4","title":"\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u898f\u7d04","text":"<p>\u3053\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f\u3001\u4ee5\u4e0b\u306e\u30c4\u30fc\u30eb\u3092\u4f7f\u7528\u3057\u3066\u30b3\u30fc\u30c9\u306e\u54c1\u8cea\u3092\u7dad\u6301\u3057\u3066\u3044\u307e\u3059\uff1a</p> <ul> <li>Black: \u30b3\u30fc\u30c9\u30d5\u30a9\u30fc\u30de\u30c3\u30bf\u30fc</li> <li>isort: \u30a4\u30f3\u30dd\u30fc\u30c8\u6587\u306e\u6574\u7406</li> <li>mypy: \u578b\u30c1\u30a7\u30c3\u30af</li> <li>flake8: \u30b3\u30fc\u30c9\u30ea\u30f3\u30bf\u30fc</li> </ul> <p>\u5909\u66f4\u3092\u63d0\u51fa\u3059\u308b\u524d\u306b\u3001\u3053\u308c\u3089\u306e\u30c4\u30fc\u30eb\u3092\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\uff1a</p> <pre><code># PDM\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\npdm run black .\npdm run isort .\npdm run mypy logkiss\npdm run flake8 logkiss\n\n# Poetry\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\npoetry run black .\npoetry run isort .\npoetry run mypy logkiss\npoetry run flake8 logkiss\n</code></pre>"},{"location":"contributing/#_5","title":"\u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u63d0\u51fa","text":"<ol> <li>\u65b0\u3057\u3044\u30d6\u30e9\u30f3\u30c1\u3092\u4f5c\u6210\u3057\u307e\u3059\uff1a</li> </ol> <pre><code>git checkout -b feature/your-feature-name\n</code></pre> <ol> <li>\u5909\u66f4\u3092\u52a0\u3048\u3001\u30b3\u30df\u30c3\u30c8\u3057\u307e\u3059\uff1a</li> </ol> <pre><code>git add .\ngit commit -m \"Add your feature description\"\n</code></pre> <ol> <li>GitHub\u306b\u30d7\u30c3\u30b7\u30e5\u3057\u307e\u3059\uff1a</li> </ol> <pre><code>git push origin feature/your-feature-name\n</code></pre> <ol> <li>GitHub\u3067\u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002</li> </ol>"},{"location":"contributing/#_6","title":"\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u66f4\u65b0","text":"<p>\u6a5f\u80fd\u3092\u8ffd\u52a0\u307e\u305f\u306f\u5909\u66f4\u3057\u305f\u5834\u5408\u306f\u3001\u5bfe\u5fdc\u3059\u308b\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3082\u66f4\u65b0\u3057\u3066\u304f\u3060\u3055\u3044\uff1a</p> <pre><code># \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u30ed\u30fc\u30ab\u30eb\u3067\u30d7\u30ec\u30d3\u30e5\u30fc\npdm run docs-serve\n\n# \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u30d3\u30eb\u30c9\npdm run docs-build\n</code></pre>"},{"location":"contributing/#_7","title":"\u30ea\u30ea\u30fc\u30b9\u30d7\u30ed\u30bb\u30b9","text":"<p>\u30ea\u30ea\u30fc\u30b9\u30d7\u30ed\u30bb\u30b9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff1a</p> <ol> <li>\u30d0\u30fc\u30b8\u30e7\u30f3\u756a\u53f7\u3092\u66f4\u65b0\u3057\u307e\u3059\uff08<code>pyproject.toml</code>\uff09</li> <li>CHANGELOG\u3092\u66f4\u65b0\u3057\u307e\u3059</li> <li>\u30bf\u30b0\u3092\u4f5c\u6210\u3057\u3066\u30d7\u30c3\u30b7\u30e5\u3057\u307e\u3059\uff1a</li> </ol> <pre><code>git tag v1.0.0\ngit push origin v1.0.0\n</code></pre> <ol> <li>GitHub\u306e\u30ea\u30ea\u30fc\u30b9\u30da\u30fc\u30b8\u3067\u65b0\u3057\u3044\u30ea\u30ea\u30fc\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002</li> </ol>"},{"location":"contributing/#_8","title":"\u8cea\u554f\u3084\u30b5\u30dd\u30fc\u30c8","text":"<p>\u8cea\u554f\u3084\u30b5\u30dd\u30fc\u30c8\u304c\u5fc5\u8981\u306a\u5834\u5408\u306f\u3001GitHub\u306eIssue\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"examples/","title":"\u30b5\u30f3\u30d7\u30eb","text":""},{"location":"examples/#_2","title":"\u57fa\u672c\u7684\u306a\u30ed\u30ae\u30f3\u30b0","text":"<p>\u57fa\u672c\u7684\u306a\u30ed\u30ae\u30f3\u30b0\u306e\u4f8b\u3067\u3059\u3002</p> <pre><code>import logkiss as logging\n\n# \u30ed\u30ac\u30fc\u306e\u53d6\u5f97\nlogger = logging.getLogger(__name__)\n\n# \u30ed\u30b0\u306e\u51fa\u529b\nlogger.warning('\u3053\u308c\u306f\u8b66\u544a\u30e1\u30c3\u30bb\u30fc\u30b8\u3067\u3059')\nlogger.info('\u3053\u308c\u306f\u60c5\u5831\u30e1\u30c3\u30bb\u30fc\u30b8\u3067\u3059')\nlogger.error('\u3053\u308c\u306f\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3067\u3059')\n</code></pre>"},{"location":"examples/#_3","title":"\u65e2\u5b58\u306e\u30ed\u30ac\u30fc\u306e\u62e1\u5f35","text":"<p>\u65e2\u5b58\u306e\u30ed\u30ac\u30fc\u3092logkiss\u3067\u62e1\u5f35\u3059\u308b\u4f8b\u3067\u3059\u3002</p> <pre><code>import logging as standard_logging\nimport logkiss as logging\n\n# \u6a19\u6e96\u30ed\u30ac\u30fc\u306e\u8a2d\u5b9a\nstandard_logger = standard_logging.getLogger(\"standard\")\nstandard_logger.setLevel(standard_logging.INFO)\n\n# logkiss\u306eKissConsoleHandler\u3092\u8ffd\u52a0\nconsole_handler = logging.KissConsoleHandler()\nstandard_logger.addHandler(console_handler)\n\n# \u30ed\u30b0\u306e\u51fa\u529b\nstandard_logger.info(\"\u6a19\u6e96\u30ed\u30ac\u30fc\u304b\u3089\u306e\u60c5\u5831\u30e1\u30c3\u30bb\u30fc\u30b8\uff08\u8272\u4ed8\u304d\uff09\")\nstandard_logger.warning(\"\u6a19\u6e96\u30ed\u30ac\u30fc\u304b\u3089\u306e\u8b66\u544a\u30e1\u30c3\u30bb\u30fc\u30b8\uff08\u8272\u4ed8\u304d\uff09\")\n</code></pre>"},{"location":"examples/#_4","title":"\u8272\u306e\u7121\u52b9\u5316","text":"<p>\u8272\u3092\u7121\u52b9\u5316\u3059\u308b\u4f8b\u3067\u3059\u3002</p> <pre><code>import logkiss as logging\n\n# \u30ed\u30ac\u30fc\u306e\u53d6\u5f97\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\n# \u65e2\u5b58\u306e\u30cf\u30f3\u30c9\u30e9\u30fc\u3092\u30af\u30ea\u30a2\nfor handler in logger.handlers[:]:\n    logger.removeHandler(handler)\n\n# \u8272\u3092\u7121\u52b9\u5316\u3057\u305f\u30d5\u30a9\u30fc\u30de\u30c3\u30bf\u30fc\u3092\u4f5c\u6210\nformatter = logging.ColoredFormatter(use_color=False)\n\n# KissConsoleHandler\u3092\u8ffd\u52a0\u3057\u3001\u30d5\u30a9\u30fc\u30de\u30c3\u30bf\u30fc\u3092\u8a2d\u5b9a\nconsole_handler = logging.KissConsoleHandler()\nconsole_handler.setFormatter(formatter)\nlogger.addHandler(console_handler)\n\n# \u30ed\u30b0\u306e\u51fa\u529b\nlogger.info(\"\u8272\u306a\u3057\u306e\u60c5\u5831\u30e1\u30c3\u30bb\u30fc\u30b8\")\nlogger.warning(\"\u8272\u306a\u3057\u306e\u8b66\u544a\u30e1\u30c3\u30bb\u30fc\u30b8\")\nlogger.error(\"\u8272\u306a\u3057\u306e\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\")\n</code></pre>"},{"location":"examples/#aws-cloudwatch","title":"AWS CloudWatch\u306e\u4f8b","text":"<p>AWS CloudWatch\u306b\u30ed\u30b0\u3092\u9001\u4fe1\u3059\u308b\u4f8b\u3067\u3059\u3002</p> <pre><code>import os\nimport time\nimport hashlib\nimport logkiss as logging\nfrom logkiss.handlers import AWSCloudWatchHandler\n\n# \u74b0\u5883\u5909\u6570\u304b\u3089AWS\u8a2d\u5b9a\u3092\u53d6\u5f97\nAWS_PROFILE = os.environ.get(\"AWS_PROFILE\")\nAWS_REGION = os.environ.get(\"AWS_DEFAULT_REGION\", \"ap-northeast-1\")\n\n# \u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u30d5\u30e9\u30b0\uff08\u30c6\u30b9\u30c8\u5f8c\u306b\u30ea\u30bd\u30fc\u30b9\u3092\u524a\u9664\u3059\u308b\u304b\u3069\u3046\u304b\uff09\nCLEAN_UP = True\n\n# \u4e00\u610f\u306e\u30ed\u30b0\u30b0\u30eb\u30fc\u30d7\u540d\u3092\u751f\u6210\ntimestamp = int(time.time())\nunique_hash = hashlib.md5(f\"{timestamp}\".encode()).hexdigest()[:8]\nlog_group_name = f\"logkiss-sample-{timestamp}-{unique_hash}\"\nlog_stream_name = \"sample-stream\"\n\n# \u30ed\u30ac\u30fc\u306e\u8a2d\u5b9a\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\n# \u30b3\u30f3\u30bd\u30fc\u30eb\u30cf\u30f3\u30c9\u30e9\u30fc\u3092\u8ffd\u52a0\nconsole_handler = logging.KissConsoleHandler()\nlogger.addHandler(console_handler)\n\n# AWS CloudWatch\u30cf\u30f3\u30c9\u30e9\u30fc\u3092\u8ffd\u52a0\naws_handler = AWSCloudWatchHandler(\n    log_group_name=log_group_name,\n    log_stream_name=log_stream_name,\n    region_name=AWS_REGION,\n    profile_name=AWS_PROFILE\n)\nlogger.addHandler(aws_handler)\n\n# \u30ed\u30b0\u306e\u51fa\u529b\nlogger.info(f\"AWS CloudWatch\u306b\u30ed\u30b0\u3092\u9001\u4fe1\u3057\u3066\u3044\u307e\u3059\uff08\u30b0\u30eb\u30fc\u30d7: {log_group_name}\uff09\")\nlogger.warning(\"\u3053\u308c\u306f\u8b66\u544a\u30e1\u30c3\u30bb\u30fc\u30b8\u3067\u3059\")\nlogger.error(\"\u3053\u308c\u306f\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3067\u3059\")\n\n# \u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\nif CLEAN_UP:\n    logger.info(\"\u30ea\u30bd\u30fc\u30b9\u3092\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u3057\u3066\u3044\u307e\u3059...\")\n    aws_handler.cleanup()\n    logger.info(\"\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u5b8c\u4e86\")\n</code></pre>"},{"location":"examples/#google-cloud-logging","title":"Google Cloud Logging\u306e\u4f8b","text":"<p>Google Cloud Logging\u306b\u30ed\u30b0\u3092\u9001\u4fe1\u3059\u308b\u4f8b\u3067\u3059\u3002</p> <pre><code>import os\nimport time\nimport hashlib\nimport logkiss as logging\nfrom logkiss.handlers import GCPCloudLoggingHandler\n\n# \u74b0\u5883\u5909\u6570\u304b\u3089GCP\u8a2d\u5b9a\u3092\u53d6\u5f97\nGCP_PROJECT_ID = os.environ.get(\"GCP_PROJECT_ID\")\n\n# \u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u30d5\u30e9\u30b0\uff08\u30c6\u30b9\u30c8\u5f8c\u306b\u30ea\u30bd\u30fc\u30b9\u3092\u524a\u9664\u3059\u308b\u304b\u3069\u3046\u304b\uff09\nCLEAN_UP = True\n\n# \u4e00\u610f\u306e\u30ed\u30b0\u540d\u3092\u751f\u6210\ntimestamp = int(time.time())\nunique_hash = hashlib.md5(f\"{timestamp}\".encode()).hexdigest()[:8]\nlog_name = f\"logkiss-sample-{timestamp}-{unique_hash}\"\n\n# \u30ed\u30ac\u30fc\u306e\u8a2d\u5b9a\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\n# \u30b3\u30f3\u30bd\u30fc\u30eb\u30cf\u30f3\u30c9\u30e9\u30fc\u3092\u8ffd\u52a0\nconsole_handler = logging.KissConsoleHandler()\nlogger.addHandler(console_handler)\n\n# GCP Cloud Logging\u30cf\u30f3\u30c9\u30e9\u30fc\u3092\u8ffd\u52a0\ngcp_handler = GCPCloudLoggingHandler(\n    project_id=GCP_PROJECT_ID,\n    log_name=log_name\n)\nlogger.addHandler(gcp_handler)\n\n# \u30ed\u30b0\u306e\u51fa\u529b\nlogger.info(f\"Google Cloud Logging\u306b\u30ed\u30b0\u3092\u9001\u4fe1\u3057\u3066\u3044\u307e\u3059\uff08\u30ed\u30b0\u540d: {log_name}\uff09\")\nlogger.warning(\"\u3053\u308c\u306f\u8b66\u544a\u30e1\u30c3\u30bb\u30fc\u30b8\u3067\u3059\")\nlogger.error(\"\u3053\u308c\u306f\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3067\u3059\")\n\n# \u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\nif CLEAN_UP:\n    logger.info(\"\u30ea\u30bd\u30fc\u30b9\u3092\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u3057\u3066\u3044\u307e\u3059...\")\n    gcp_handler.cleanup()\n    logger.info(\"\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u5b8c\u4e86\")\n</code></pre>"},{"location":"installation/","title":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":""},{"location":"installation/#_2","title":"\u5fc5\u8981\u6761\u4ef6","text":"<ul> <li>Python 3.8\u4ee5\u4e0a</li> </ul>"},{"location":"installation/#pip","title":"pip\u3092\u4f7f\u3063\u305f\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":"<p>\u6700\u3082\u7c21\u5358\u306a\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\u306f\u3001pip\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3059\uff1a</p> <pre><code>pip install logkiss\n</code></pre> <p>\u30af\u30e9\u30a6\u30c9\u30ed\u30ae\u30f3\u30b0\u6a5f\u80fd\uff08AWS CloudWatch\u3068Google Cloud Logging\uff09\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\uff1a</p> <pre><code>pip install \"logkiss[cloud]\"\n</code></pre>"},{"location":"installation/#pdm","title":"PDM\u3092\u4f7f\u3063\u305f\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":"<p>PDM\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>pdm add logkiss\n</code></pre> <p>\u30af\u30e9\u30a6\u30c9\u30ed\u30ae\u30f3\u30b0\u6a5f\u80fd\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\uff1a</p> <pre><code>pdm add \"logkiss[cloud]\"\n</code></pre>"},{"location":"installation/#poetry","title":"Poetry\u3092\u4f7f\u3063\u305f\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":"<p>Poetry\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>poetry add logkiss\n</code></pre> <p>\u30af\u30e9\u30a6\u30c9\u30ed\u30ae\u30f3\u30b0\u6a5f\u80fd\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\uff1a</p> <pre><code>poetry add \"logkiss[cloud]\"\n</code></pre>"},{"location":"installation/#_3","title":"\u30bd\u30fc\u30b9\u304b\u3089\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":"<p>\u6700\u65b0\u306e\u958b\u767a\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u305f\u3044\u5834\u5408\u306f\u3001GitHub\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u30af\u30ed\u30fc\u30f3\u3057\u3066\u76f4\u63a5\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>git clone https://github.com/yourusername/logkiss.git\ncd logkiss\npip install -e .\n</code></pre>"},{"location":"installation/#_4","title":"\u4f9d\u5b58\u95a2\u4fc2","text":"<ul> <li>\u5fc5\u9808: PyYAML</li> <li>\u30aa\u30d7\u30b7\u30e7\u30f3: </li> <li>AWS CloudWatch\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408: boto3</li> <li>Google Cloud Logging\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408: google-cloud-logging</li> </ul>"},{"location":"usage/","title":"\u4f7f\u3044\u65b9","text":""},{"location":"usage/#_2","title":"\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9","text":"<p>logkiss\u306f\u6a19\u6e96\u306ePython\u30ed\u30ae\u30f3\u30b0\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u4e92\u63db\u6027\u304c\u3042\u308a\u3001\u540c\u69d8\u306e\u65b9\u6cd5\u3067\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002</p> <pre><code>import logkiss as logging\n\n# \u30ed\u30ac\u30fc\u306e\u53d6\u5f97\nlogger = logging.getLogger(__name__)\n\n# \u30ed\u30b0\u30ec\u30d9\u30eb\u306e\u8a2d\u5b9a\nlogger.setLevel(logging.DEBUG)\n\n# \u30ed\u30b0\u306e\u51fa\u529b\nlogger.debug(\"\u30c7\u30d0\u30c3\u30b0\u30e1\u30c3\u30bb\u30fc\u30b8\")\nlogger.info(\"\u60c5\u5831\u30e1\u30c3\u30bb\u30fc\u30b8\")\nlogger.warning(\"\u8b66\u544a\u30e1\u30c3\u30bb\u30fc\u30b8\")\nlogger.error(\"\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\")\nlogger.critical(\"\u81f4\u547d\u7684\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\")\n</code></pre>"},{"location":"usage/#kissconsolehandler","title":"KissConsoleHandler\u306e\u4f7f\u7528","text":"<p>logkiss\u306e\u4e3b\u306a\u7279\u5fb4\u306f\u3001\u30ab\u30e9\u30d5\u30eb\u306a\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\u3092\u63d0\u4f9b\u3059\u308b<code>KissConsoleHandler</code>\u3067\u3059\u3002</p> <pre><code>import logkiss as logging\n\n# \u30ed\u30ac\u30fc\u306e\u53d6\u5f97\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\n# \u65e2\u5b58\u306e\u30cf\u30f3\u30c9\u30e9\u30fc\u3092\u30af\u30ea\u30a2\nfor handler in logger.handlers[:]:\n    logger.removeHandler(handler)\n\n# KissConsoleHandler\u3092\u8ffd\u52a0\nconsole_handler = logging.KissConsoleHandler()\nlogger.addHandler(console_handler)\n\n# \u30ed\u30b0\u306e\u51fa\u529b\nlogger.debug(\"\u30c7\u30d0\u30c3\u30b0\u30e1\u30c3\u30bb\u30fc\u30b8\")\nlogger.info(\"\u60c5\u5831\u30e1\u30c3\u30bb\u30fc\u30b8\")\nlogger.warning(\"\u8b66\u544a\u30e1\u30c3\u30bb\u30fc\u30b8\")\nlogger.error(\"\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\")\nlogger.critical(\"\u81f4\u547d\u7684\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\")\n</code></pre>"},{"location":"usage/#_3","title":"\u8272\u306e\u7121\u52b9\u5316","text":"<p>\u7279\u5b9a\u306e\u74b0\u5883\u3067\u306f\u3001\u8272\u4ed8\u304d\u306e\u51fa\u529b\u304c\u4e0d\u8981\u306a\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\u8272\u3092\u7121\u52b9\u5316\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>import logkiss as logging\n\n# \u30ed\u30ac\u30fc\u306e\u53d6\u5f97\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\n# \u65e2\u5b58\u306e\u30cf\u30f3\u30c9\u30e9\u30fc\u3092\u30af\u30ea\u30a2\nfor handler in logger.handlers[:]:\n    logger.removeHandler(handler)\n\n# \u8272\u3092\u7121\u52b9\u5316\u3057\u305f\u30d5\u30a9\u30fc\u30de\u30c3\u30bf\u30fc\u3092\u4f5c\u6210\nformatter = logging.ColoredFormatter(use_color=False)\n\n# KissConsoleHandler\u3092\u8ffd\u52a0\u3057\u3001\u30d5\u30a9\u30fc\u30de\u30c3\u30bf\u30fc\u3092\u8a2d\u5b9a\nconsole_handler = logging.KissConsoleHandler()\nconsole_handler.setFormatter(formatter)\nlogger.addHandler(console_handler)\n\n# \u30ed\u30b0\u306e\u51fa\u529b\nlogger.debug(\"\u8272\u306a\u3057\u306e\u30c7\u30d0\u30c3\u30b0\u30e1\u30c3\u30bb\u30fc\u30b8\")\nlogger.info(\"\u8272\u306a\u3057\u306e\u60c5\u5831\u30e1\u30c3\u30bb\u30fc\u30b8\")\nlogger.warning(\"\u8272\u306a\u3057\u306e\u8b66\u544a\u30e1\u30c3\u30bb\u30fc\u30b8\")\nlogger.error(\"\u8272\u306a\u3057\u306e\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\")\n</code></pre>"},{"location":"usage/#_4","title":"\u30d5\u30a1\u30a4\u30eb\u3078\u306e\u30ed\u30b0\u51fa\u529b","text":"<p>\u30d5\u30a1\u30a4\u30eb\u306b\u30ed\u30b0\u3092\u51fa\u529b\u3059\u308b\u5834\u5408\u306f\u3001<code>KissFileHandler</code>\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a</p> <pre><code>import logkiss as logging\n\n# \u30ed\u30ac\u30fc\u306e\u53d6\u5f97\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\n# KissFileHandler\u3092\u8ffd\u52a0\nfile_handler = logging.KissFileHandler(\"app.log\")\nlogger.addHandler(file_handler)\n\n# \u30ed\u30b0\u306e\u51fa\u529b\nlogger.debug(\"\u30d5\u30a1\u30a4\u30eb\u306b\u51fa\u529b\u3055\u308c\u308b\u30c7\u30d0\u30c3\u30b0\u30e1\u30c3\u30bb\u30fc\u30b8\")\nlogger.info(\"\u30d5\u30a1\u30a4\u30eb\u306b\u51fa\u529b\u3055\u308c\u308b\u60c5\u5831\u30e1\u30c3\u30bb\u30fc\u30b8\")\n</code></pre>"},{"location":"usage/#aws-cloudwatch","title":"AWS CloudWatch\u3078\u306e\u30ed\u30b0\u51fa\u529b","text":"<p>AWS CloudWatch\u306b\u30ed\u30b0\u3092\u9001\u4fe1\u3059\u308b\u5834\u5408\u306f\u3001<code>AWSCloudWatchHandler</code>\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a</p> <pre><code>import logkiss as logging\nfrom logkiss.handlers import AWSCloudWatchHandler\n\n# \u30ed\u30ac\u30fc\u306e\u53d6\u5f97\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\n# AWSCloudWatchHandler\u3092\u8ffd\u52a0\naws_handler = AWSCloudWatchHandler(\n    log_group_name=\"my-log-group\",\n    log_stream_name=\"my-log-stream\",\n    region_name=\"ap-northeast-1\"\n)\nlogger.addHandler(aws_handler)\n\n# \u30ed\u30b0\u306e\u51fa\u529b\nlogger.info(\"AWS CloudWatch\u306b\u9001\u4fe1\u3055\u308c\u308b\u60c5\u5831\u30e1\u30c3\u30bb\u30fc\u30b8\")\n</code></pre>"},{"location":"usage/#google-cloud-logging","title":"Google Cloud Logging\u3078\u306e\u30ed\u30b0\u51fa\u529b","text":"<p>Google Cloud Logging\u306b\u30ed\u30b0\u3092\u9001\u4fe1\u3059\u308b\u5834\u5408\u306f\u3001<code>GCPCloudLoggingHandler</code>\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a</p> <pre><code>import logkiss as logging\nfrom logkiss.handlers import GCPCloudLoggingHandler\n\n# \u30ed\u30ac\u30fc\u306e\u53d6\u5f97\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\n# GCPCloudLoggingHandler\u3092\u8ffd\u52a0\ngcp_handler = GCPCloudLoggingHandler(\n    project_id=\"my-gcp-project\",\n    log_name=\"my-log\"\n)\nlogger.addHandler(gcp_handler)\n\n# \u30ed\u30b0\u306e\u51fa\u529b\nlogger.info(\"Google Cloud Logging\u306b\u9001\u4fe1\u3055\u308c\u308b\u60c5\u5831\u30e1\u30c3\u30bb\u30fc\u30b8\")\n</code></pre>"},{"location":"api/handlers/","title":"Handlers Module","text":"<p>The logkiss handlers module contains handler classes for sending logs to various output destinations.</p>"},{"location":"api/handlers/#logkiss.handlers","title":"<code>logkiss.handlers</code>","text":"<p>Handlers module for logkiss logging.</p> <p>Copyright (c) 2025 Taka Suzuki SPDX-License-Identifier: MIT See LICENSE for details.</p> <p>This module contains various handlers used in logkiss. Main classes: - BaseHandler: Base handler class for implementing custom handlers - GCPCloudLoggingHandler: Handler for sending logs to Google Cloud Logging - AWSCloudWatchHandler: Handler for sending logs to AWS CloudWatch Logs</p>"},{"location":"api/handlers/#logkiss.handlers-classes","title":"Classes","text":""},{"location":"api/handlers/#logkiss.handlers.AWSCloudWatchHandler","title":"<code>AWSCloudWatchHandler</code>","text":"<p>               Bases: <code>BaseHandler</code></p> <p>Handler for sending logs to AWS CloudWatch Logs</p> Source code in <code>logkiss/handlers.py</code> <pre><code>class AWSCloudWatchHandler(BaseHandler):\n    \"\"\"Handler for sending logs to AWS CloudWatch Logs\"\"\"\n\n    def __init__(\n        self,\n        log_group_name: str,\n        log_stream_name: Optional[str] = None,\n        region_name: Optional[str] = None,\n        batch_size: int = 100,\n        flush_interval: float = 5.0,\n    ) -&gt; None:\n        \"\"\"\n        Args:\n            log_group_name: Log group name\n            log_stream_name: Log stream name. If None, instance ID will be used\n            region_name: Region name. If None, it will be automatically detected from environment variables\n            batch_size: Batch size\n            flush_interval: Flush interval in seconds\n        \"\"\"\n        if not AWS_AVAILABLE:\n            raise ImportError(\n                \"boto3 package is required. \"\n                \"Install it with: pip install 'logkiss[cloud]'\"\n            )\n\n        super().__init__()\n        self.client = boto3.client(\"logs\", region_name=region_name)\n        self.log_group_name = log_group_name\n\n        if log_stream_name is None:\n            # Try to determine an appropriate log stream name\n            # First check if we're running on EC2\n            log_stream_name = self._get_instance_identifier()\n\n        self.log_stream_name = log_stream_name\n        self._ensure_log_group_and_stream()\n\n        self._batch = []\n        self._batch_lock = threading.Lock()\n        self._batch_size = batch_size\n        self._flush_interval = flush_interval\n        self._sequence_token = None\n        self._executor = ThreadPoolExecutor(max_workers=1)\n        self._running = True\n        self._start_periodic_flush()\n\n    def _get_instance_identifier(self) -&gt; str:\n        \"\"\"\n        Get a unique identifier for this instance.\n        Tries different methods to get a unique identifier:\n        1. Check AWS_INSTANCE_ID environment variable\n        2. Use hostname\n        3. Generate a random UUID as last resort\n\n        Returns:\n            A string identifier\n        \"\"\"\n        import os\n        import socket\n\n        # Method 1: Try to get instance ID from environment variable\n        instance_id = os.environ.get('AWS_INSTANCE_ID')\n        if instance_id:\n            print(f\"Using AWS_INSTANCE_ID environment variable as log stream name: {instance_id}\")\n            return instance_id\n\n        # Method 2: Use hostname\n        try:\n            hostname = socket.gethostname()\n            if hostname and hostname != 'localhost':\n                print(f\"Using hostname as log stream name: {hostname}\")\n                return hostname\n        except Exception as e:\n            print(f\"Failed to get hostname: {str(e)}\")\n\n        # Method 3: Generate a random UUID as last resort\n        import uuid\n        random_id = str(uuid.uuid4())\n        print(f\"Using random UUID as log stream name: {random_id}\")\n        return random_id\n\n    def _start_periodic_flush(self) -&gt; None:\n        \"\"\"Start periodic flush\"\"\"\n        print(\"DEBUG: _start_periodic_flush called\")\n        def _periodic_flush():\n            print(\"DEBUG: _periodic_flush started\")\n            while self._running:\n                print(\"DEBUG: Sleeping for\", self._flush_interval, \"seconds\")\n                time.sleep(self._flush_interval)\n                print(\"DEBUG: Calling _flush\")\n                self._flush()\n                print(\"DEBUG: _flush completed\")\n            print(\"DEBUG: _periodic_flush exiting\")\n\n        print(\"DEBUG: Submitting _periodic_flush to executor\")\n        self._executor.submit(_periodic_flush)\n        print(\"DEBUG: _start_periodic_flush completed\")\n\n    def handle(self, log_entry: Dict[str, Any]) -&gt; None:\n        \"\"\"\n        Handle a log entry and send it to CloudWatch Logs\n\n        Args:\n            log_entry: Log entry to be handled\n        \"\"\"\n        timestamp = int(log_entry.get(\"timestamp\", time.time()) * 1000)\n        message = json.dumps(log_entry)\n\n        with self._batch_lock:\n            self._batch.append({\n                \"timestamp\": timestamp,\n                \"message\": message\n            })\n            if len(self._batch) &gt;= self._batch_size:\n                self._flush()\n\n    def _ensure_log_group_and_stream(self) -&gt; None:\n        \"\"\"Ensure log group and log stream exist, create if necessary\"\"\"\n        try:\n            self.client.create_log_group(logGroupName=self.log_group_name)\n        except self.client.exceptions.ResourceAlreadyExistsException:\n            pass\n\n        try:\n            self.client.create_log_stream(\n                logGroupName=self.log_group_name,\n                logStreamName=self.log_stream_name\n            )\n        except self.client.exceptions.ResourceAlreadyExistsException:\n            pass\n\n    def _flush(self) -&gt; None:\n        \"\"\"Flush batch\"\"\"\n        with self._batch_lock:\n            if not self._batch:\n                return\n\n            events = sorted(self._batch, key=lambda x: x[\"timestamp\"])\n            self._batch = []\n\n        try:\n            kwargs = {\n                \"logGroupName\": self.log_group_name,\n                \"logStreamName\": self.log_stream_name,\n                \"logEvents\": events\n            }\n            if self._sequence_token:\n                kwargs[\"sequenceToken\"] = self._sequence_token\n\n            response = self.client.put_log_events(**kwargs)\n            self._sequence_token = response.get(\"nextSequenceToken\")\n        except Exception as e:\n            # Error log will be printed to standard error\n            import sys\n            print(f\"Error writing to CloudWatch Logs: {e}\", file=sys.stderr)\n\n    def __del__(self):\n        \"\"\"Cleanup when the handler is deleted\"\"\"\n        self._running = False\n        if hasattr(self, '_executor'):\n            self._executor.shutdown(wait=True)\n</code></pre>"},{"location":"api/handlers/#logkiss.handlers.AWSCloudWatchHandler-functions","title":"Functions","text":""},{"location":"api/handlers/#logkiss.handlers.AWSCloudWatchHandler.__del__","title":"<code>__del__()</code>","text":"<p>Cleanup when the handler is deleted</p> Source code in <code>logkiss/handlers.py</code> <pre><code>def __del__(self):\n    \"\"\"Cleanup when the handler is deleted\"\"\"\n    self._running = False\n    if hasattr(self, '_executor'):\n        self._executor.shutdown(wait=True)\n</code></pre>"},{"location":"api/handlers/#logkiss.handlers.AWSCloudWatchHandler.__init__","title":"<code>__init__(log_group_name, log_stream_name=None, region_name=None, batch_size=100, flush_interval=5.0)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>log_group_name</code> <code>str</code> <p>Log group name</p> required <code>log_stream_name</code> <code>Optional[str]</code> <p>Log stream name. If None, instance ID will be used</p> <code>None</code> <code>region_name</code> <code>Optional[str]</code> <p>Region name. If None, it will be automatically detected from environment variables</p> <code>None</code> <code>batch_size</code> <code>int</code> <p>Batch size</p> <code>100</code> <code>flush_interval</code> <code>float</code> <p>Flush interval in seconds</p> <code>5.0</code> Source code in <code>logkiss/handlers.py</code> <pre><code>def __init__(\n    self,\n    log_group_name: str,\n    log_stream_name: Optional[str] = None,\n    region_name: Optional[str] = None,\n    batch_size: int = 100,\n    flush_interval: float = 5.0,\n) -&gt; None:\n    \"\"\"\n    Args:\n        log_group_name: Log group name\n        log_stream_name: Log stream name. If None, instance ID will be used\n        region_name: Region name. If None, it will be automatically detected from environment variables\n        batch_size: Batch size\n        flush_interval: Flush interval in seconds\n    \"\"\"\n    if not AWS_AVAILABLE:\n        raise ImportError(\n            \"boto3 package is required. \"\n            \"Install it with: pip install 'logkiss[cloud]'\"\n        )\n\n    super().__init__()\n    self.client = boto3.client(\"logs\", region_name=region_name)\n    self.log_group_name = log_group_name\n\n    if log_stream_name is None:\n        # Try to determine an appropriate log stream name\n        # First check if we're running on EC2\n        log_stream_name = self._get_instance_identifier()\n\n    self.log_stream_name = log_stream_name\n    self._ensure_log_group_and_stream()\n\n    self._batch = []\n    self._batch_lock = threading.Lock()\n    self._batch_size = batch_size\n    self._flush_interval = flush_interval\n    self._sequence_token = None\n    self._executor = ThreadPoolExecutor(max_workers=1)\n    self._running = True\n    self._start_periodic_flush()\n</code></pre>"},{"location":"api/handlers/#logkiss.handlers.AWSCloudWatchHandler._ensure_log_group_and_stream","title":"<code>_ensure_log_group_and_stream()</code>","text":"<p>Ensure log group and log stream exist, create if necessary</p> Source code in <code>logkiss/handlers.py</code> <pre><code>def _ensure_log_group_and_stream(self) -&gt; None:\n    \"\"\"Ensure log group and log stream exist, create if necessary\"\"\"\n    try:\n        self.client.create_log_group(logGroupName=self.log_group_name)\n    except self.client.exceptions.ResourceAlreadyExistsException:\n        pass\n\n    try:\n        self.client.create_log_stream(\n            logGroupName=self.log_group_name,\n            logStreamName=self.log_stream_name\n        )\n    except self.client.exceptions.ResourceAlreadyExistsException:\n        pass\n</code></pre>"},{"location":"api/handlers/#logkiss.handlers.AWSCloudWatchHandler._flush","title":"<code>_flush()</code>","text":"<p>Flush batch</p> Source code in <code>logkiss/handlers.py</code> <pre><code>def _flush(self) -&gt; None:\n    \"\"\"Flush batch\"\"\"\n    with self._batch_lock:\n        if not self._batch:\n            return\n\n        events = sorted(self._batch, key=lambda x: x[\"timestamp\"])\n        self._batch = []\n\n    try:\n        kwargs = {\n            \"logGroupName\": self.log_group_name,\n            \"logStreamName\": self.log_stream_name,\n            \"logEvents\": events\n        }\n        if self._sequence_token:\n            kwargs[\"sequenceToken\"] = self._sequence_token\n\n        response = self.client.put_log_events(**kwargs)\n        self._sequence_token = response.get(\"nextSequenceToken\")\n    except Exception as e:\n        # Error log will be printed to standard error\n        import sys\n        print(f\"Error writing to CloudWatch Logs: {e}\", file=sys.stderr)\n</code></pre>"},{"location":"api/handlers/#logkiss.handlers.AWSCloudWatchHandler._get_instance_identifier","title":"<code>_get_instance_identifier()</code>","text":"<p>Get a unique identifier for this instance. Tries different methods to get a unique identifier: 1. Check AWS_INSTANCE_ID environment variable 2. Use hostname 3. Generate a random UUID as last resort</p> <p>Returns:</p> Type Description <code>str</code> <p>A string identifier</p> Source code in <code>logkiss/handlers.py</code> <pre><code>def _get_instance_identifier(self) -&gt; str:\n    \"\"\"\n    Get a unique identifier for this instance.\n    Tries different methods to get a unique identifier:\n    1. Check AWS_INSTANCE_ID environment variable\n    2. Use hostname\n    3. Generate a random UUID as last resort\n\n    Returns:\n        A string identifier\n    \"\"\"\n    import os\n    import socket\n\n    # Method 1: Try to get instance ID from environment variable\n    instance_id = os.environ.get('AWS_INSTANCE_ID')\n    if instance_id:\n        print(f\"Using AWS_INSTANCE_ID environment variable as log stream name: {instance_id}\")\n        return instance_id\n\n    # Method 2: Use hostname\n    try:\n        hostname = socket.gethostname()\n        if hostname and hostname != 'localhost':\n            print(f\"Using hostname as log stream name: {hostname}\")\n            return hostname\n    except Exception as e:\n        print(f\"Failed to get hostname: {str(e)}\")\n\n    # Method 3: Generate a random UUID as last resort\n    import uuid\n    random_id = str(uuid.uuid4())\n    print(f\"Using random UUID as log stream name: {random_id}\")\n    return random_id\n</code></pre>"},{"location":"api/handlers/#logkiss.handlers.AWSCloudWatchHandler._start_periodic_flush","title":"<code>_start_periodic_flush()</code>","text":"<p>Start periodic flush</p> Source code in <code>logkiss/handlers.py</code> <pre><code>def _start_periodic_flush(self) -&gt; None:\n    \"\"\"Start periodic flush\"\"\"\n    print(\"DEBUG: _start_periodic_flush called\")\n    def _periodic_flush():\n        print(\"DEBUG: _periodic_flush started\")\n        while self._running:\n            print(\"DEBUG: Sleeping for\", self._flush_interval, \"seconds\")\n            time.sleep(self._flush_interval)\n            print(\"DEBUG: Calling _flush\")\n            self._flush()\n            print(\"DEBUG: _flush completed\")\n        print(\"DEBUG: _periodic_flush exiting\")\n\n    print(\"DEBUG: Submitting _periodic_flush to executor\")\n    self._executor.submit(_periodic_flush)\n    print(\"DEBUG: _start_periodic_flush completed\")\n</code></pre>"},{"location":"api/handlers/#logkiss.handlers.AWSCloudWatchHandler.handle","title":"<code>handle(log_entry)</code>","text":"<p>Handle a log entry and send it to CloudWatch Logs</p> <p>Parameters:</p> Name Type Description Default <code>log_entry</code> <code>Dict[str, Any]</code> <p>Log entry to be handled</p> required Source code in <code>logkiss/handlers.py</code> <pre><code>def handle(self, log_entry: Dict[str, Any]) -&gt; None:\n    \"\"\"\n    Handle a log entry and send it to CloudWatch Logs\n\n    Args:\n        log_entry: Log entry to be handled\n    \"\"\"\n    timestamp = int(log_entry.get(\"timestamp\", time.time()) * 1000)\n    message = json.dumps(log_entry)\n\n    with self._batch_lock:\n        self._batch.append({\n            \"timestamp\": timestamp,\n            \"message\": message\n        })\n        if len(self._batch) &gt;= self._batch_size:\n            self._flush()\n</code></pre>"},{"location":"api/handlers/#logkiss.handlers.BaseHandler","title":"<code>BaseHandler</code>","text":"<p>Base handler class for implementing custom handlers</p> Source code in <code>logkiss/handlers.py</code> <pre><code>class BaseHandler:\n    \"\"\"Base handler class for implementing custom handlers\"\"\"\n\n    def __init__(self) -&gt; None:\n        pass\n\n    def handle(self, log_entry: Dict[str, Any]) -&gt; None:\n        \"\"\"\n        Handle a log entry\n\n        Args:\n            log_entry: Log entry to be handled\n        \"\"\"\n        raise NotImplementedError(\"handle method must be implemented\")\n</code></pre>"},{"location":"api/handlers/#logkiss.handlers.BaseHandler-functions","title":"Functions","text":""},{"location":"api/handlers/#logkiss.handlers.BaseHandler.handle","title":"<code>handle(log_entry)</code>","text":"<p>Handle a log entry</p> <p>Parameters:</p> Name Type Description Default <code>log_entry</code> <code>Dict[str, Any]</code> <p>Log entry to be handled</p> required Source code in <code>logkiss/handlers.py</code> <pre><code>def handle(self, log_entry: Dict[str, Any]) -&gt; None:\n    \"\"\"\n    Handle a log entry\n\n    Args:\n        log_entry: Log entry to be handled\n    \"\"\"\n    raise NotImplementedError(\"handle method must be implemented\")\n</code></pre>"},{"location":"api/handlers/#logkiss.handlers.GCPCloudLoggingHandler","title":"<code>GCPCloudLoggingHandler</code>","text":"<p>               Bases: <code>BaseHandler</code></p> <p>Handler for sending logs to Google Cloud Logging</p> Source code in <code>logkiss/handlers.py</code> <pre><code>class GCPCloudLoggingHandler(BaseHandler):\n    \"\"\"Handler for sending logs to Google Cloud Logging\"\"\"\n\n    def __init__(\n        self,\n        project_id: Optional[str] = None,\n        log_name: str = \"python\",\n        resource: Optional[Dict[str, str]] = None,\n        labels: Optional[Dict[str, str]] = None,\n        batch_size: int = 100,\n        flush_interval: float = 5.0,\n    ) -&gt; None:\n        \"\"\"\n        Args:\n            project_id: GCP project ID. If None, it will be automatically detected from environment variables\n            log_name: Log name\n            resource: Resource information. If None, it will be set to global\n            labels: Labels\n            batch_size: Batch size\n            flush_interval: Flush interval in seconds\n        \"\"\"\n        if not GOOGLE_CLOUD_AVAILABLE:\n            raise ImportError(\n                \"google-cloud-logging package is required. \"\n                \"Install it with: pip install 'logkiss[cloud]'\"\n            )\n\n        super().__init__()\n        print(\"DEBUG: Creating GCP client with project:\", project_id)\n        self.client = google_logging.Client(project=project_id)\n        print(\"DEBUG: Client created with project:\", getattr(self.client, 'project', None))\n        self.project_id = project_id or self.client.project  # \u30d7\u30ed\u30b8\u30a7\u30af\u30c8ID\u3092\u8a2d\u5b9a\n        print(\"DEBUG: Project ID set to:\", self.project_id)\n        self.logger = self.client.logger(log_name)\n        self.resource = resource or {\"type\": \"global\"}\n        self.labels = labels or {}\n\n        self._batch = []\n        self._batch_lock = threading.Lock()\n        self._batch_size = batch_size\n        self._flush_interval = flush_interval\n        self._executor = ThreadPoolExecutor(max_workers=1)\n        self._running = True\n        print(\"DEBUG: Starting periodic flush\")\n        self._start_periodic_flush()\n        print(\"DEBUG: Initialization complete\")\n\n    def handle(self, log_entry: Dict[str, Any]) -&gt; None:\n        \"\"\"\n        Handle a log entry and send it to Google Cloud Logging\n\n        Args:\n            log_entry: Log entry to be handled\n        \"\"\"\n        severity = self._convert_level_to_severity(log_entry.get(\"level\", \"INFO\"))\n        entry = {\n            \"severity\": severity,\n            \"timestamp\": log_entry.get(\"timestamp\"),\n            \"message\": log_entry.get(\"message\", \"\"),\n            \"labels\": {**self.labels, **log_entry.get(\"labels\", {})},\n        }\n\n        with self._batch_lock:\n            self._batch.append(entry)\n            if len(self._batch) &gt;= self._batch_size:\n                self._flush()\n\n    def _start_periodic_flush(self) -&gt; None:\n        \"\"\"Start periodic flush\"\"\"\n        print(\"DEBUG: _start_periodic_flush called\")\n        def _periodic_flush():\n            print(\"DEBUG: _periodic_flush started\")\n            while self._running:\n                print(\"DEBUG: Sleeping for\", self._flush_interval, \"seconds\")\n                time.sleep(self._flush_interval)\n                print(\"DEBUG: Calling _flush\")\n                self._flush()\n                print(\"DEBUG: _flush completed\")\n            print(\"DEBUG: _periodic_flush exiting\")\n\n        print(\"DEBUG: Submitting _periodic_flush to executor\")\n        self._executor.submit(_periodic_flush)\n        print(\"DEBUG: _start_periodic_flush completed\")\n\n    def _flush(self) -&gt; None:\n        \"\"\"Flush batch\"\"\"\n        with self._batch_lock:\n            if not self._batch:\n                return\n\n            entries = self._batch\n            self._batch = []\n\n        try:\n            self.logger.batch_write_entries(entries)\n        except Exception as e:\n            # Error log will be printed to standard error\n            import sys\n            print(f\"Error writing to Cloud Logging: {e}\", file=sys.stderr)\n\n    def _convert_level_to_severity(self, level: str) -&gt; str:\n        \"\"\"Convert log level to Cloud Logging severity\"\"\"\n        mapping = {\n            \"DEBUG\": \"DEBUG\",\n            \"INFO\": \"INFO\",\n            \"WARNING\": \"WARNING\",\n            \"ERROR\": \"ERROR\",\n            \"CRITICAL\": \"CRITICAL\",\n        }\n        return mapping.get(level.upper(), \"DEFAULT\")\n\n    def __del__(self):\n        \"\"\"Cleanup when the handler is deleted\"\"\"\n        self._running = False\n        if hasattr(self, '_executor'):\n            self._executor.shutdown(wait=True)\n</code></pre>"},{"location":"api/handlers/#logkiss.handlers.GCPCloudLoggingHandler-functions","title":"Functions","text":""},{"location":"api/handlers/#logkiss.handlers.GCPCloudLoggingHandler.__del__","title":"<code>__del__()</code>","text":"<p>Cleanup when the handler is deleted</p> Source code in <code>logkiss/handlers.py</code> <pre><code>def __del__(self):\n    \"\"\"Cleanup when the handler is deleted\"\"\"\n    self._running = False\n    if hasattr(self, '_executor'):\n        self._executor.shutdown(wait=True)\n</code></pre>"},{"location":"api/handlers/#logkiss.handlers.GCPCloudLoggingHandler.__init__","title":"<code>__init__(project_id=None, log_name='python', resource=None, labels=None, batch_size=100, flush_interval=5.0)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>Optional[str]</code> <p>GCP project ID. If None, it will be automatically detected from environment variables</p> <code>None</code> <code>log_name</code> <code>str</code> <p>Log name</p> <code>'python'</code> <code>resource</code> <code>Optional[Dict[str, str]]</code> <p>Resource information. If None, it will be set to global</p> <code>None</code> <code>labels</code> <code>Optional[Dict[str, str]]</code> <p>Labels</p> <code>None</code> <code>batch_size</code> <code>int</code> <p>Batch size</p> <code>100</code> <code>flush_interval</code> <code>float</code> <p>Flush interval in seconds</p> <code>5.0</code> Source code in <code>logkiss/handlers.py</code> <pre><code>def __init__(\n    self,\n    project_id: Optional[str] = None,\n    log_name: str = \"python\",\n    resource: Optional[Dict[str, str]] = None,\n    labels: Optional[Dict[str, str]] = None,\n    batch_size: int = 100,\n    flush_interval: float = 5.0,\n) -&gt; None:\n    \"\"\"\n    Args:\n        project_id: GCP project ID. If None, it will be automatically detected from environment variables\n        log_name: Log name\n        resource: Resource information. If None, it will be set to global\n        labels: Labels\n        batch_size: Batch size\n        flush_interval: Flush interval in seconds\n    \"\"\"\n    if not GOOGLE_CLOUD_AVAILABLE:\n        raise ImportError(\n            \"google-cloud-logging package is required. \"\n            \"Install it with: pip install 'logkiss[cloud]'\"\n        )\n\n    super().__init__()\n    print(\"DEBUG: Creating GCP client with project:\", project_id)\n    self.client = google_logging.Client(project=project_id)\n    print(\"DEBUG: Client created with project:\", getattr(self.client, 'project', None))\n    self.project_id = project_id or self.client.project  # \u30d7\u30ed\u30b8\u30a7\u30af\u30c8ID\u3092\u8a2d\u5b9a\n    print(\"DEBUG: Project ID set to:\", self.project_id)\n    self.logger = self.client.logger(log_name)\n    self.resource = resource or {\"type\": \"global\"}\n    self.labels = labels or {}\n\n    self._batch = []\n    self._batch_lock = threading.Lock()\n    self._batch_size = batch_size\n    self._flush_interval = flush_interval\n    self._executor = ThreadPoolExecutor(max_workers=1)\n    self._running = True\n    print(\"DEBUG: Starting periodic flush\")\n    self._start_periodic_flush()\n    print(\"DEBUG: Initialization complete\")\n</code></pre>"},{"location":"api/handlers/#logkiss.handlers.GCPCloudLoggingHandler._convert_level_to_severity","title":"<code>_convert_level_to_severity(level)</code>","text":"<p>Convert log level to Cloud Logging severity</p> Source code in <code>logkiss/handlers.py</code> <pre><code>def _convert_level_to_severity(self, level: str) -&gt; str:\n    \"\"\"Convert log level to Cloud Logging severity\"\"\"\n    mapping = {\n        \"DEBUG\": \"DEBUG\",\n        \"INFO\": \"INFO\",\n        \"WARNING\": \"WARNING\",\n        \"ERROR\": \"ERROR\",\n        \"CRITICAL\": \"CRITICAL\",\n    }\n    return mapping.get(level.upper(), \"DEFAULT\")\n</code></pre>"},{"location":"api/handlers/#logkiss.handlers.GCPCloudLoggingHandler._flush","title":"<code>_flush()</code>","text":"<p>Flush batch</p> Source code in <code>logkiss/handlers.py</code> <pre><code>def _flush(self) -&gt; None:\n    \"\"\"Flush batch\"\"\"\n    with self._batch_lock:\n        if not self._batch:\n            return\n\n        entries = self._batch\n        self._batch = []\n\n    try:\n        self.logger.batch_write_entries(entries)\n    except Exception as e:\n        # Error log will be printed to standard error\n        import sys\n        print(f\"Error writing to Cloud Logging: {e}\", file=sys.stderr)\n</code></pre>"},{"location":"api/handlers/#logkiss.handlers.GCPCloudLoggingHandler._start_periodic_flush","title":"<code>_start_periodic_flush()</code>","text":"<p>Start periodic flush</p> Source code in <code>logkiss/handlers.py</code> <pre><code>def _start_periodic_flush(self) -&gt; None:\n    \"\"\"Start periodic flush\"\"\"\n    print(\"DEBUG: _start_periodic_flush called\")\n    def _periodic_flush():\n        print(\"DEBUG: _periodic_flush started\")\n        while self._running:\n            print(\"DEBUG: Sleeping for\", self._flush_interval, \"seconds\")\n            time.sleep(self._flush_interval)\n            print(\"DEBUG: Calling _flush\")\n            self._flush()\n            print(\"DEBUG: _flush completed\")\n        print(\"DEBUG: _periodic_flush exiting\")\n\n    print(\"DEBUG: Submitting _periodic_flush to executor\")\n    self._executor.submit(_periodic_flush)\n    print(\"DEBUG: _start_periodic_flush completed\")\n</code></pre>"},{"location":"api/handlers/#logkiss.handlers.GCPCloudLoggingHandler.handle","title":"<code>handle(log_entry)</code>","text":"<p>Handle a log entry and send it to Google Cloud Logging</p> <p>Parameters:</p> Name Type Description Default <code>log_entry</code> <code>Dict[str, Any]</code> <p>Log entry to be handled</p> required Source code in <code>logkiss/handlers.py</code> <pre><code>def handle(self, log_entry: Dict[str, Any]) -&gt; None:\n    \"\"\"\n    Handle a log entry and send it to Google Cloud Logging\n\n    Args:\n        log_entry: Log entry to be handled\n    \"\"\"\n    severity = self._convert_level_to_severity(log_entry.get(\"level\", \"INFO\"))\n    entry = {\n        \"severity\": severity,\n        \"timestamp\": log_entry.get(\"timestamp\"),\n        \"message\": log_entry.get(\"message\", \"\"),\n        \"labels\": {**self.labels, **log_entry.get(\"labels\", {})},\n    }\n\n    with self._batch_lock:\n        self._batch.append(entry)\n        if len(self._batch) &gt;= self._batch_size:\n            self._flush()\n</code></pre>"},{"location":"api/logkiss/","title":"logkiss Core Module","text":"<p>The logkiss core module contains basic classes and functions for colorful log output.</p>"},{"location":"api/logkiss/#logkiss.logkiss","title":"<code>logkiss.logkiss</code>","text":"<p>Core module of logkiss.</p> <p>Copyright (c) 2025 Taka Suzuki SPDX-License-Identifier: MIT See LICENSE for details.</p> <p>This module provides the core functionality of logkiss, including logging setup and configuration management.</p>"},{"location":"api/logkiss/#logkiss.logkiss-classes","title":"Classes","text":""},{"location":"api/logkiss/#logkiss.logkiss.ColorConfig","title":"<code>ColorConfig</code>  <code>dataclass</code>","text":"<p>Data class to hold color settings</p> Source code in <code>logkiss/logkiss.py</code> <pre><code>@dataclass\nclass ColorConfig:\n    \"\"\"Data class to hold color settings\"\"\"\n    color: Optional[str] = None\n    background: Optional[str] = None\n    style: Optional[str] = None\n</code></pre>"},{"location":"api/logkiss/#logkiss.logkiss.ColorManager","title":"<code>ColorManager</code>","text":"<p>Class to manage color settings</p> Source code in <code>logkiss/logkiss.py</code> <pre><code>class ColorManager:\n    \"\"\"Class to manage color settings\"\"\"\n\n    def __init__(self, config_path: Optional[Union[str, Path]] = None):\n        \"\"\"\n        Args:\n            config_path: Path to color configuration file\n        \"\"\"\n        self.config_path = config_path\n        self.config = self._load_config()\n\n    def _load_config(self) -&gt; Dict[str, Any]:\n        \"\"\"Load color settings from file\"\"\"\n        # Default color settings\n        default_config = {\n            'levels': {\n                'DEBUG': {'fg': 'blue'},\n                'INFO': {'fg': 'white'},\n                'WARNING': {'fg': 'yellow'},\n                'ERROR': {'fg': 'red'},\n                'CRITICAL': {'fg': 'red', 'style': 'bold'},\n            },\n            'elements': {\n                'timestamp': {'fg': 'white'},\n                'filename': {'fg': 'cyan'},\n                'message': {\n                    'DEBUG': {'fg': 'blue'},\n                    'INFO': {'fg': 'white'},\n                    'WARNING': {'fg': 'yellow'},\n                    'ERROR': {'fg': 'red'},\n                    'CRITICAL': {'fg': 'red', 'style': 'bold'},\n                }\n            }\n        }\n\n        # Load configuration from file if available\n        if self.config_path:\n            try:\n                with open(self.config_path) as f:\n                    config = safe_load(f)\n                return {**default_config, **config}\n            except Exception:\n                return default_config\n        return default_config\n\n    def get_level_color(self, level: int) -&gt; Dict[str, Any]:\n        \"\"\"Get color settings for a log level\"\"\"\n        level_name = logging.getLevelName(level)\n        return self.config['levels'].get(level_name, {})\n\n    def get_message_color(self, level: int) -&gt; Dict[str, Any]:\n        \"\"\"Get color settings for a log message\"\"\"\n        level_name = logging.getLevelName(level)\n        return self.config['elements']['message'].get(level_name, {})\n\n    def get_element_color(self, element: str) -&gt; Dict[str, Any]:\n        \"\"\"Get color settings for a log element\"\"\"\n        return self.config['elements'].get(element, {})\n\n    def apply_color(self, text: str, config: Dict[str, Any]) -&gt; str:\n        \"\"\"Apply color settings to text\"\"\"\n        if not config:\n            return text\n\n        # Generate ANSI escape sequence\n        codes = []\n\n        # Foreground color\n        if 'fg' in config:\n            codes.append(getattr(Colors, config['fg'].upper(), ''))\n\n        # Background color\n        if 'bg' in config:\n            codes.append(getattr(Colors, f\"BG_{config['bg'].upper()}\", ''))\n\n        # Style\n        if 'style' in config:\n            codes.append(getattr(Colors, config['style'].upper(), ''))\n\n        # Apply ANSI escape sequence\n        return \"\".join(codes) + text + Colors.RESET\n\n    def colorize_level(self, levelname: str) -&gt; str:\n        \"\"\"Colorize log level name\"\"\"\n        level = logging.getLevelName(levelname)\n        level_config = self.get_level_color(level)\n        return self.apply_color(levelname, level_config)\n\n    def colorize_filename(self, filename: str) -&gt; str:\n        \"\"\"Colorize filename\"\"\"\n        filename_config = self.get_element_color('filename')\n        return self.apply_color(filename, filename_config)\n\n    def colorize_timestamp(self, timestamp: str) -&gt; str:\n        \"\"\"Colorize timestamp\"\"\"\n        timestamp_config = self.get_element_color('timestamp')\n        return self.apply_color(timestamp, timestamp_config)\n\n    def colorize_message(self, message: str, level: int) -&gt; str:\n        \"\"\"Colorize log message\"\"\"\n        message_config = self.get_message_color(level)\n        return self.apply_color(message, message_config)\n</code></pre>"},{"location":"api/logkiss/#logkiss.logkiss.ColorManager-functions","title":"Functions","text":""},{"location":"api/logkiss/#logkiss.logkiss.ColorManager.__init__","title":"<code>__init__(config_path=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>config_path</code> <code>Optional[Union[str, Path]]</code> <p>Path to color configuration file</p> <code>None</code> Source code in <code>logkiss/logkiss.py</code> <pre><code>def __init__(self, config_path: Optional[Union[str, Path]] = None):\n    \"\"\"\n    Args:\n        config_path: Path to color configuration file\n    \"\"\"\n    self.config_path = config_path\n    self.config = self._load_config()\n</code></pre>"},{"location":"api/logkiss/#logkiss.logkiss.ColorManager._load_config","title":"<code>_load_config()</code>","text":"<p>Load color settings from file</p> Source code in <code>logkiss/logkiss.py</code> <pre><code>def _load_config(self) -&gt; Dict[str, Any]:\n    \"\"\"Load color settings from file\"\"\"\n    # Default color settings\n    default_config = {\n        'levels': {\n            'DEBUG': {'fg': 'blue'},\n            'INFO': {'fg': 'white'},\n            'WARNING': {'fg': 'yellow'},\n            'ERROR': {'fg': 'red'},\n            'CRITICAL': {'fg': 'red', 'style': 'bold'},\n        },\n        'elements': {\n            'timestamp': {'fg': 'white'},\n            'filename': {'fg': 'cyan'},\n            'message': {\n                'DEBUG': {'fg': 'blue'},\n                'INFO': {'fg': 'white'},\n                'WARNING': {'fg': 'yellow'},\n                'ERROR': {'fg': 'red'},\n                'CRITICAL': {'fg': 'red', 'style': 'bold'},\n            }\n        }\n    }\n\n    # Load configuration from file if available\n    if self.config_path:\n        try:\n            with open(self.config_path) as f:\n                config = safe_load(f)\n            return {**default_config, **config}\n        except Exception:\n            return default_config\n    return default_config\n</code></pre>"},{"location":"api/logkiss/#logkiss.logkiss.ColorManager.apply_color","title":"<code>apply_color(text, config)</code>","text":"<p>Apply color settings to text</p> Source code in <code>logkiss/logkiss.py</code> <pre><code>def apply_color(self, text: str, config: Dict[str, Any]) -&gt; str:\n    \"\"\"Apply color settings to text\"\"\"\n    if not config:\n        return text\n\n    # Generate ANSI escape sequence\n    codes = []\n\n    # Foreground color\n    if 'fg' in config:\n        codes.append(getattr(Colors, config['fg'].upper(), ''))\n\n    # Background color\n    if 'bg' in config:\n        codes.append(getattr(Colors, f\"BG_{config['bg'].upper()}\", ''))\n\n    # Style\n    if 'style' in config:\n        codes.append(getattr(Colors, config['style'].upper(), ''))\n\n    # Apply ANSI escape sequence\n    return \"\".join(codes) + text + Colors.RESET\n</code></pre>"},{"location":"api/logkiss/#logkiss.logkiss.ColorManager.colorize_filename","title":"<code>colorize_filename(filename)</code>","text":"<p>Colorize filename</p> Source code in <code>logkiss/logkiss.py</code> <pre><code>def colorize_filename(self, filename: str) -&gt; str:\n    \"\"\"Colorize filename\"\"\"\n    filename_config = self.get_element_color('filename')\n    return self.apply_color(filename, filename_config)\n</code></pre>"},{"location":"api/logkiss/#logkiss.logkiss.ColorManager.colorize_level","title":"<code>colorize_level(levelname)</code>","text":"<p>Colorize log level name</p> Source code in <code>logkiss/logkiss.py</code> <pre><code>def colorize_level(self, levelname: str) -&gt; str:\n    \"\"\"Colorize log level name\"\"\"\n    level = logging.getLevelName(levelname)\n    level_config = self.get_level_color(level)\n    return self.apply_color(levelname, level_config)\n</code></pre>"},{"location":"api/logkiss/#logkiss.logkiss.ColorManager.colorize_message","title":"<code>colorize_message(message, level)</code>","text":"<p>Colorize log message</p> Source code in <code>logkiss/logkiss.py</code> <pre><code>def colorize_message(self, message: str, level: int) -&gt; str:\n    \"\"\"Colorize log message\"\"\"\n    message_config = self.get_message_color(level)\n    return self.apply_color(message, message_config)\n</code></pre>"},{"location":"api/logkiss/#logkiss.logkiss.ColorManager.colorize_timestamp","title":"<code>colorize_timestamp(timestamp)</code>","text":"<p>Colorize timestamp</p> Source code in <code>logkiss/logkiss.py</code> <pre><code>def colorize_timestamp(self, timestamp: str) -&gt; str:\n    \"\"\"Colorize timestamp\"\"\"\n    timestamp_config = self.get_element_color('timestamp')\n    return self.apply_color(timestamp, timestamp_config)\n</code></pre>"},{"location":"api/logkiss/#logkiss.logkiss.ColorManager.get_element_color","title":"<code>get_element_color(element)</code>","text":"<p>Get color settings for a log element</p> Source code in <code>logkiss/logkiss.py</code> <pre><code>def get_element_color(self, element: str) -&gt; Dict[str, Any]:\n    \"\"\"Get color settings for a log element\"\"\"\n    return self.config['elements'].get(element, {})\n</code></pre>"},{"location":"api/logkiss/#logkiss.logkiss.ColorManager.get_level_color","title":"<code>get_level_color(level)</code>","text":"<p>Get color settings for a log level</p> Source code in <code>logkiss/logkiss.py</code> <pre><code>def get_level_color(self, level: int) -&gt; Dict[str, Any]:\n    \"\"\"Get color settings for a log level\"\"\"\n    level_name = logging.getLevelName(level)\n    return self.config['levels'].get(level_name, {})\n</code></pre>"},{"location":"api/logkiss/#logkiss.logkiss.ColorManager.get_message_color","title":"<code>get_message_color(level)</code>","text":"<p>Get color settings for a log message</p> Source code in <code>logkiss/logkiss.py</code> <pre><code>def get_message_color(self, level: int) -&gt; Dict[str, Any]:\n    \"\"\"Get color settings for a log message\"\"\"\n    level_name = logging.getLevelName(level)\n    return self.config['elements']['message'].get(level_name, {})\n</code></pre>"},{"location":"api/logkiss/#logkiss.logkiss.ColoredFormatter","title":"<code>ColoredFormatter</code>","text":"<p>               Bases: <code>Formatter</code></p> <p>Formatter that applies colors to log messages based on their level.</p> <p>This formatter extends the standard logging.Formatter to add color to log messages based on their level. Colors can be customized through a configuration file.</p> <p>To disable colors, set use_color=False when creating the formatter:     formatter = ColoredFormatter(use_color=False)</p> Note <p>When using KissConsoleHandler, a ColoredFormatter is automatically created with use_color set based on the output stream. To disable colors with KissConsoleHandler, you need to create a ColoredFormatter with use_color=False and set it explicitly:     handler = KissConsoleHandler()     formatter = ColoredFormatter(use_color=False)     handler.setFormatter(formatter)</p> <p>Parameters:</p> Name Type Description Default <code>fmt</code> <code>Optional[str]</code> <p>Format string for log messages. Default is   '%(asctime)s %(levelname)s | %(filename)s: %(lineno)d | %(message)s'</p> <code>None</code> <code>datefmt</code> <code>Optional[str]</code> <p>Date format string. Default is None (ISO8601 format).</p> <code>None</code> <code>style</code> <code>str</code> <p>Format style ('%', '{', '$'). Default is '%'.</p> <code>'%'</code> <code>validate</code> <code>bool</code> <p>Whether to validate format string. Default is True.</p> <code>True</code> <code>color_config</code> <code>Optional[Union[str, Path]]</code> <p>Path to color configuration file. Default is None.</p> <code>None</code> <code>use_color</code> <code>bool</code> <p>Whether to apply colors to log messages. Default is True.</p> <code>True</code> Source code in <code>logkiss/logkiss.py</code> <pre><code>class ColoredFormatter(Formatter):\n    \"\"\"Formatter that applies colors to log messages based on their level.\n\n    This formatter extends the standard logging.Formatter to add color\n    to log messages based on their level. Colors can be customized through\n    a configuration file.\n\n    To disable colors, set use_color=False when creating the formatter:\n        formatter = ColoredFormatter(use_color=False)\n\n    Note:\n        When using KissConsoleHandler, a ColoredFormatter is automatically\n        created with use_color set based on the output stream. To disable\n        colors with KissConsoleHandler, you need to create a ColoredFormatter\n        with use_color=False and set it explicitly:\n            handler = KissConsoleHandler()\n            formatter = ColoredFormatter(use_color=False)\n            handler.setFormatter(formatter)\n\n    Args:\n        fmt: Format string for log messages. Default is \n             '%(asctime)s %(levelname)s | %(filename)s: %(lineno)d | %(message)s'\n        datefmt: Date format string. Default is None (ISO8601 format).\n        style: Format style ('%', '{', '$'). Default is '%'.\n        validate: Whether to validate format string. Default is True.\n        color_config: Path to color configuration file. Default is None.\n        use_color: Whether to apply colors to log messages. Default is True.\n    \"\"\"\n\n    def __init__(self, fmt: Optional[str] = None, datefmt: Optional[str] = None,\n                 style: str = '%', validate: bool = True,\n                 color_config: Optional[Union[str, Path]] = None,\n                 use_color: bool = True):\n        \"\"\"\n        Args:\n            fmt: Format string\n            datefmt: Date format string\n            style: Format style ('%', '{', '$')\n            validate: Validate format string\n            color_config: Path to color configuration file\n            use_color: Apply colors to log messages\n        \"\"\"\n        if fmt is None:\n            fmt = '%(asctime)s %(levelname)s | %(filename)s: %(lineno)d | %(message)s'\n        super().__init__(fmt, datefmt, style, validate)\n        self.color_manager = ColorManager(color_config)\n        self.use_color = use_color\n\n    def format(self, record: LogRecord) -&gt; str:\n        \"\"\"Format log record with colors\"\"\"\n        # Apply colors\n        if self.use_color:\n            record.levelname = self.color_manager.colorize_level(record.levelname)\n            record.filename = self.color_manager.colorize_filename(record.filename)\n            record.asctime = self.color_manager.colorize_timestamp(self.formatTime(record, self.datefmt))\n            record.message = self.color_manager.colorize_message(record.getMessage(), record.levelno)\n        else:\n            record.message = record.getMessage()\n\n        # Format record\n        return Formatter.format(self, record)\n</code></pre>"},{"location":"api/logkiss/#logkiss.logkiss.ColoredFormatter-functions","title":"Functions","text":""},{"location":"api/logkiss/#logkiss.logkiss.ColoredFormatter.__init__","title":"<code>__init__(fmt=None, datefmt=None, style='%', validate=True, color_config=None, use_color=True)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>fmt</code> <code>Optional[str]</code> <p>Format string</p> <code>None</code> <code>datefmt</code> <code>Optional[str]</code> <p>Date format string</p> <code>None</code> <code>style</code> <code>str</code> <p>Format style ('%', '{', '$')</p> <code>'%'</code> <code>validate</code> <code>bool</code> <p>Validate format string</p> <code>True</code> <code>color_config</code> <code>Optional[Union[str, Path]]</code> <p>Path to color configuration file</p> <code>None</code> <code>use_color</code> <code>bool</code> <p>Apply colors to log messages</p> <code>True</code> Source code in <code>logkiss/logkiss.py</code> <pre><code>def __init__(self, fmt: Optional[str] = None, datefmt: Optional[str] = None,\n             style: str = '%', validate: bool = True,\n             color_config: Optional[Union[str, Path]] = None,\n             use_color: bool = True):\n    \"\"\"\n    Args:\n        fmt: Format string\n        datefmt: Date format string\n        style: Format style ('%', '{', '$')\n        validate: Validate format string\n        color_config: Path to color configuration file\n        use_color: Apply colors to log messages\n    \"\"\"\n    if fmt is None:\n        fmt = '%(asctime)s %(levelname)s | %(filename)s: %(lineno)d | %(message)s'\n    super().__init__(fmt, datefmt, style, validate)\n    self.color_manager = ColorManager(color_config)\n    self.use_color = use_color\n</code></pre>"},{"location":"api/logkiss/#logkiss.logkiss.ColoredFormatter.format","title":"<code>format(record)</code>","text":"<p>Format log record with colors</p> Source code in <code>logkiss/logkiss.py</code> <pre><code>def format(self, record: LogRecord) -&gt; str:\n    \"\"\"Format log record with colors\"\"\"\n    # Apply colors\n    if self.use_color:\n        record.levelname = self.color_manager.colorize_level(record.levelname)\n        record.filename = self.color_manager.colorize_filename(record.filename)\n        record.asctime = self.color_manager.colorize_timestamp(self.formatTime(record, self.datefmt))\n        record.message = self.color_manager.colorize_message(record.getMessage(), record.levelno)\n    else:\n        record.message = record.getMessage()\n\n    # Format record\n    return Formatter.format(self, record)\n</code></pre>"},{"location":"api/logkiss/#logkiss.logkiss.Colors","title":"<code>Colors</code>","text":"<p>ANSI escape sequences</p> Source code in <code>logkiss/logkiss.py</code> <pre><code>class Colors:\n    \"\"\"ANSI escape sequences\"\"\"\n    RESET = '\\033[0m'\n    BOLD = '\\033[1m'\n    DIM = '\\033[2m'\n    ITALIC = '\\033[3m'\n    UNDERLINE = '\\033[4m'\n    BLINK = '\\033[5m'\n    REVERSE = '\\033[7m'\n    HIDDEN = '\\033[8m'\n    STRIKE = '\\033[9m'\n\n    # Foreground colors\n    BLACK = '\\033[30m'\n    RED = '\\033[31m'\n    GREEN = '\\033[32m'\n    YELLOW = '\\033[33m'\n    BLUE = '\\033[34m'\n    MAGENTA = '\\033[35m'\n    CYAN = '\\033[36m'\n    WHITE = '\\033[37m'\n\n    # Background colors\n    BG_BLACK = '\\033[40m'\n    BG_RED = '\\033[41m'\n    BG_GREEN = '\\033[42m'\n    BG_YELLOW = '\\033[43m'\n    BG_BLUE = '\\033[44m'\n    BG_MAGENTA = '\\033[45m'\n    BG_CYAN = '\\033[46m'\n    BG_WHITE = '\\033[47m'\n\n    # Bright foreground colors\n    BRIGHT_BLACK = '\\033[90m'\n    BRIGHT_RED = '\\033[91m'\n    BRIGHT_GREEN = '\\033[92m'\n    BRIGHT_YELLOW = '\\033[93m'\n    BRIGHT_BLUE = '\\033[94m'\n    BRIGHT_MAGENTA = '\\033[95m'\n    BRIGHT_CYAN = '\\033[96m'\n    BRIGHT_WHITE = '\\033[97m'\n\n    # Bright background colors\n    BG_BRIGHT_BLACK = '\\033[100m'\n    BG_BRIGHT_RED = '\\033[101m'\n    BG_BRIGHT_GREEN = '\\033[102m'\n    BG_BRIGHT_YELLOW = '\\033[103m'\n    BG_BRIGHT_BLUE = '\\033[104m'\n    BG_BRIGHT_MAGENTA = '\\033[105m'\n    BG_BRIGHT_CYAN = '\\033[106m'\n    BG_BRIGHT_WHITE = '\\033[107m'\n\n    @classmethod\n    def get_color(cls, name: str) -&gt; str:\n        \"\"\"Get ANSI escape sequence from color name\"\"\"\n        if not name:\n            return ''\n\n        # Add prefix for background colors\n        if name.startswith('bg_'):\n            name = f'BG_{name[3:].upper()}'\n        else:\n            name = name.upper()\n\n        return getattr(cls, name, '')\n</code></pre>"},{"location":"api/logkiss/#logkiss.logkiss.Colors-functions","title":"Functions","text":""},{"location":"api/logkiss/#logkiss.logkiss.Colors.get_color","title":"<code>get_color(name)</code>  <code>classmethod</code>","text":"<p>Get ANSI escape sequence from color name</p> Source code in <code>logkiss/logkiss.py</code> <pre><code>@classmethod\ndef get_color(cls, name: str) -&gt; str:\n    \"\"\"Get ANSI escape sequence from color name\"\"\"\n    if not name:\n        return ''\n\n    # Add prefix for background colors\n    if name.startswith('bg_'):\n        name = f'BG_{name[3:].upper()}'\n    else:\n        name = name.upper()\n\n    return getattr(cls, name, '')\n</code></pre>"},{"location":"api/logkiss/#logkiss.logkiss.KissConsoleHandler","title":"<code>KissConsoleHandler</code>","text":"<p>               Bases: <code>StreamHandler</code></p> <p>Handler that outputs colored log messages to the console.</p> <p>This handler extends the standard logging.StreamHandler to add color to log messages based on their level. Colors can be customized through a configuration file.</p> <p>By default, colors are enabled when outputting to sys.stderr or sys.stdout. To disable colors, you need to create a ColoredFormatter with use_color=False and set it explicitly:     handler = KissConsoleHandler()     formatter = ColoredFormatter(use_color=False)     handler.setFormatter(formatter)</p> <p>Parameters:</p> Name Type Description Default <code>stream</code> <code>Optional[TextIO]</code> <p>Output stream. Default is sys.stderr.</p> <code>None</code> <code>color_config</code> <code>Optional[Union[str, Path]]</code> <p>Path to color configuration file. Default is None.</p> <code>None</code> Source code in <code>logkiss/logkiss.py</code> <pre><code>class KissConsoleHandler(StreamHandler):\n    \"\"\"Handler that outputs colored log messages to the console.\n\n    This handler extends the standard logging.StreamHandler to add color\n    to log messages based on their level. Colors can be customized through\n    a configuration file.\n\n    By default, colors are enabled when outputting to sys.stderr or sys.stdout.\n    To disable colors, you need to create a ColoredFormatter with use_color=False\n    and set it explicitly:\n        handler = KissConsoleHandler()\n        formatter = ColoredFormatter(use_color=False)\n        handler.setFormatter(formatter)\n\n    Args:\n        stream: Output stream. Default is sys.stderr.\n        color_config: Path to color configuration file. Default is None.\n    \"\"\"\n\n    def __init__(self, stream: Optional[TextIO] = None,\n                 color_config: Optional[Union[str, Path]] = None):\n        \"\"\"\n        Args:\n            stream: Output stream\n            color_config: Path to color configuration file\n        \"\"\"\n        # Default to sys.stderr\n        if stream is None:\n            stream = sys.stderr\n\n        super().__init__(stream)\n        # Apply colors if outputting to sys.stderr or sys.stdout\n        use_color = stream is None or stream is sys.stderr or stream is sys.stdout\n        self.formatter = ColoredFormatter(color_config=color_config, use_color=use_color)\n        self.setFormatter(self.formatter)\n        self.setLevel(logging.DEBUG)  # Set default level to DEBUG\n\n        # Add path shortening filter\n        self.addFilter(PathShortenerFilter())\n\n    def format(self, record: LogRecord) -&gt; str:\n        \"\"\"Format log record\"\"\"\n        # Set default formatter if not set\n        if self.formatter is None:\n            self.formatter = ColoredFormatter()\n        return self.formatter.format(record)\n\n    def emit(self, record: LogRecord) -&gt; None:\n        \"\"\"Output log record\"\"\"\n        try:\n            msg = self.format(record)\n            stream = self.stream\n            # if exception information is present, it's formatted as text and appended to msg\n            stream.write(msg + self.terminator)\n            self.flush()\n        except Exception:\n            self.handleError(record)\n</code></pre>"},{"location":"api/logkiss/#logkiss.logkiss.KissConsoleHandler-functions","title":"Functions","text":""},{"location":"api/logkiss/#logkiss.logkiss.KissConsoleHandler.__init__","title":"<code>__init__(stream=None, color_config=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>stream</code> <code>Optional[TextIO]</code> <p>Output stream</p> <code>None</code> <code>color_config</code> <code>Optional[Union[str, Path]]</code> <p>Path to color configuration file</p> <code>None</code> Source code in <code>logkiss/logkiss.py</code> <pre><code>def __init__(self, stream: Optional[TextIO] = None,\n             color_config: Optional[Union[str, Path]] = None):\n    \"\"\"\n    Args:\n        stream: Output stream\n        color_config: Path to color configuration file\n    \"\"\"\n    # Default to sys.stderr\n    if stream is None:\n        stream = sys.stderr\n\n    super().__init__(stream)\n    # Apply colors if outputting to sys.stderr or sys.stdout\n    use_color = stream is None or stream is sys.stderr or stream is sys.stdout\n    self.formatter = ColoredFormatter(color_config=color_config, use_color=use_color)\n    self.setFormatter(self.formatter)\n    self.setLevel(logging.DEBUG)  # Set default level to DEBUG\n\n    # Add path shortening filter\n    self.addFilter(PathShortenerFilter())\n</code></pre>"},{"location":"api/logkiss/#logkiss.logkiss.KissConsoleHandler.emit","title":"<code>emit(record)</code>","text":"<p>Output log record</p> Source code in <code>logkiss/logkiss.py</code> <pre><code>def emit(self, record: LogRecord) -&gt; None:\n    \"\"\"Output log record\"\"\"\n    try:\n        msg = self.format(record)\n        stream = self.stream\n        # if exception information is present, it's formatted as text and appended to msg\n        stream.write(msg + self.terminator)\n        self.flush()\n    except Exception:\n        self.handleError(record)\n</code></pre>"},{"location":"api/logkiss/#logkiss.logkiss.KissConsoleHandler.format","title":"<code>format(record)</code>","text":"<p>Format log record</p> Source code in <code>logkiss/logkiss.py</code> <pre><code>def format(self, record: LogRecord) -&gt; str:\n    \"\"\"Format log record\"\"\"\n    # Set default formatter if not set\n    if self.formatter is None:\n        self.formatter = ColoredFormatter()\n    return self.formatter.format(record)\n</code></pre>"},{"location":"api/logkiss/#logkiss.logkiss.KissFileHandler","title":"<code>KissFileHandler</code>","text":"<p>               Bases: <code>FileHandler</code></p> <p>Handler that outputs log messages to a file.</p> <p>This handler extends the standard logging.FileHandler to use the ColoredFormatter by default, with colors disabled.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>Log file path.</p> required <code>mode</code> <code>str</code> <p>File open mode. Default is 'a' (append).</p> <code>'a'</code> <code>encoding</code> <code>Optional[str]</code> <p>File encoding. Default is None (system default).</p> <code>None</code> <code>delay</code> <code>bool</code> <p>Whether to delay opening the file until the first log. Default is False.</p> <code>False</code> <code>color_config</code> <code>Optional[Union[str, Path]]</code> <p>Path to color configuration file. Default is None.</p> <code>None</code> Source code in <code>logkiss/logkiss.py</code> <pre><code>class KissFileHandler(FileHandler):\n    \"\"\"Handler that outputs log messages to a file.\n\n    This handler extends the standard logging.FileHandler to use\n    the ColoredFormatter by default, with colors disabled.\n\n    Args:\n        filename: Log file path.\n        mode: File open mode. Default is 'a' (append).\n        encoding: File encoding. Default is None (system default).\n        delay: Whether to delay opening the file until the first log. Default is False.\n        color_config: Path to color configuration file. Default is None.\n    \"\"\"\n\n    def __init__(self, filename: str,\n                 mode: str = 'a', encoding: Optional[str] = None,\n                 delay: bool = False,\n                 color_config: Optional[Union[str, Path]] = None):\n        \"\"\"\n        Args:\n            filename: Log file path\n            mode: File open mode\n            encoding: File encoding\n            delay: Delay file open\n            color_config: Path to color configuration file\n        \"\"\"\n        super().__init__(filename, mode, encoding, delay)\n        self.formatter = ColoredFormatter(color_config=color_config, use_color=False)\n        self.setFormatter(self.formatter)\n</code></pre>"},{"location":"api/logkiss/#logkiss.logkiss.KissFileHandler-functions","title":"Functions","text":""},{"location":"api/logkiss/#logkiss.logkiss.KissFileHandler.__init__","title":"<code>__init__(filename, mode='a', encoding=None, delay=False, color_config=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>Log file path</p> required <code>mode</code> <code>str</code> <p>File open mode</p> <code>'a'</code> <code>encoding</code> <code>Optional[str]</code> <p>File encoding</p> <code>None</code> <code>delay</code> <code>bool</code> <p>Delay file open</p> <code>False</code> <code>color_config</code> <code>Optional[Union[str, Path]]</code> <p>Path to color configuration file</p> <code>None</code> Source code in <code>logkiss/logkiss.py</code> <pre><code>def __init__(self, filename: str,\n             mode: str = 'a', encoding: Optional[str] = None,\n             delay: bool = False,\n             color_config: Optional[Union[str, Path]] = None):\n    \"\"\"\n    Args:\n        filename: Log file path\n        mode: File open mode\n        encoding: File encoding\n        delay: Delay file open\n        color_config: Path to color configuration file\n    \"\"\"\n    super().__init__(filename, mode, encoding, delay)\n    self.formatter = ColoredFormatter(color_config=color_config, use_color=False)\n    self.setFormatter(self.formatter)\n</code></pre>"},{"location":"api/logkiss/#logkiss.logkiss.KissLogger","title":"<code>KissLogger</code>","text":"<p>               Bases: <code>Logger</code></p> <p>Logger that uses colored output by default</p> Source code in <code>logkiss/logkiss.py</code> <pre><code>class KissLogger(logging.Logger):\n    \"\"\"Logger that uses colored output by default\"\"\"\n\n    def __init__(self, name: str):\n        \"\"\"Initialize the logger with the specified name\"\"\"\n        super().__init__(name)\n        self.setLevel(logging.WARNING)  # Set default level to WARNING\n\n    def setLevel(self, level: int) -&gt; None:\n        \"\"\"Set the logging level for both logger and handlers\"\"\"\n        super().setLevel(level)  # Call parent's setLevel\n        # Update handler levels\n        for handler in self.handlers:\n            handler.setLevel(level)\n\n    def makeRecord(self, name: str, level: int, fn: str, lno: int, msg: str,\n                   args: tuple, exc_info: Optional[bool],\n                   func: Optional[str] = None,\n                   extra: Optional[Dict[str, Any]] = None,\n                   sinfo: Optional[str] = None) -&gt; LogRecord:\n        \"\"\"Create a LogRecord with the given arguments\"\"\"\n        # Get caller information from extra\n        if extra is not None:\n            if '_filename' in extra:\n                fn = extra['_filename']\n            if '_lineno' in extra:\n                lno = extra['_lineno']\n\n        # Shorten path if enabled\n        if os.environ.get('LOGKISS_PATH_SHORTEN', '1').lower() in ('1', 'true', 'yes'):\n            # Use only filename\n            fn = os.path.basename(fn)\n\n        # Create LogRecord\n        record = super().makeRecord(name, level, fn, lno, msg, args, exc_info, func, extra, sinfo)\n        return record\n</code></pre>"},{"location":"api/logkiss/#logkiss.logkiss.KissLogger-functions","title":"Functions","text":""},{"location":"api/logkiss/#logkiss.logkiss.KissLogger.__init__","title":"<code>__init__(name)</code>","text":"<p>Initialize the logger with the specified name</p> Source code in <code>logkiss/logkiss.py</code> <pre><code>def __init__(self, name: str):\n    \"\"\"Initialize the logger with the specified name\"\"\"\n    super().__init__(name)\n    self.setLevel(logging.WARNING)  # Set default level to WARNING\n</code></pre>"},{"location":"api/logkiss/#logkiss.logkiss.KissLogger.makeRecord","title":"<code>makeRecord(name, level, fn, lno, msg, args, exc_info, func=None, extra=None, sinfo=None)</code>","text":"<p>Create a LogRecord with the given arguments</p> Source code in <code>logkiss/logkiss.py</code> <pre><code>def makeRecord(self, name: str, level: int, fn: str, lno: int, msg: str,\n               args: tuple, exc_info: Optional[bool],\n               func: Optional[str] = None,\n               extra: Optional[Dict[str, Any]] = None,\n               sinfo: Optional[str] = None) -&gt; LogRecord:\n    \"\"\"Create a LogRecord with the given arguments\"\"\"\n    # Get caller information from extra\n    if extra is not None:\n        if '_filename' in extra:\n            fn = extra['_filename']\n        if '_lineno' in extra:\n            lno = extra['_lineno']\n\n    # Shorten path if enabled\n    if os.environ.get('LOGKISS_PATH_SHORTEN', '1').lower() in ('1', 'true', 'yes'):\n        # Use only filename\n        fn = os.path.basename(fn)\n\n    # Create LogRecord\n    record = super().makeRecord(name, level, fn, lno, msg, args, exc_info, func, extra, sinfo)\n    return record\n</code></pre>"},{"location":"api/logkiss/#logkiss.logkiss.KissLogger.setLevel","title":"<code>setLevel(level)</code>","text":"<p>Set the logging level for both logger and handlers</p> Source code in <code>logkiss/logkiss.py</code> <pre><code>def setLevel(self, level: int) -&gt; None:\n    \"\"\"Set the logging level for both logger and handlers\"\"\"\n    super().setLevel(level)  # Call parent's setLevel\n    # Update handler levels\n    for handler in self.handlers:\n        handler.setLevel(level)\n</code></pre>"},{"location":"api/logkiss/#logkiss.logkiss.KissRotatingFileHandler","title":"<code>KissRotatingFileHandler</code>","text":"<p>               Bases: <code>RotatingFileHandler</code></p> <p>Handler that outputs log messages to a rotating file.</p> <p>This handler extends the standard logging.handlers.RotatingFileHandler to use the ColoredFormatter by default, with colors disabled.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>Log file path.</p> required <code>mode</code> <code>str</code> <p>File open mode. Default is 'a' (append).</p> <code>'a'</code> <code>maxBytes</code> <code>int</code> <p>Maximum log file size in bytes. Default is 0 (no rotation).</p> <code>0</code> <code>backupCount</code> <code>int</code> <p>Number of backup files to keep. Default is 0 (no backups).</p> <code>0</code> <code>encoding</code> <code>Optional[str]</code> <p>File encoding. Default is None (system default).</p> <code>None</code> <code>delay</code> <code>bool</code> <p>Whether to delay opening the file until the first log. Default is False.</p> <code>False</code> <code>color_config</code> <code>Optional[Union[str, Path]]</code> <p>Path to color configuration file. Default is None.</p> <code>None</code> Source code in <code>logkiss/logkiss.py</code> <pre><code>class KissRotatingFileHandler(RotatingFileHandler):\n    \"\"\"Handler that outputs log messages to a rotating file.\n\n    This handler extends the standard logging.handlers.RotatingFileHandler\n    to use the ColoredFormatter by default, with colors disabled.\n\n    Args:\n        filename: Log file path.\n        mode: File open mode. Default is 'a' (append).\n        maxBytes: Maximum log file size in bytes. Default is 0 (no rotation).\n        backupCount: Number of backup files to keep. Default is 0 (no backups).\n        encoding: File encoding. Default is None (system default).\n        delay: Whether to delay opening the file until the first log. Default is False.\n        color_config: Path to color configuration file. Default is None.\n    \"\"\"\n\n    def __init__(self, filename: str,\n                 mode: str = 'a', maxBytes: int = 0,\n                 backupCount: int = 0, encoding: Optional[str] = None,\n                 delay: bool = False,\n                 color_config: Optional[Union[str, Path]] = None):\n        \"\"\"\n        Args:\n            filename: Log file path\n            mode: File open mode\n            maxBytes: Maximum log file size\n            backupCount: Number of backup files\n            encoding: File encoding\n            delay: Delay file open\n            color_config: Path to color configuration file\n        \"\"\"\n        super().__init__(filename, mode, maxBytes, backupCount, encoding, delay)\n        self.formatter = ColoredFormatter(color_config=color_config, use_color=False)\n        self.setFormatter(self.formatter)\n</code></pre>"},{"location":"api/logkiss/#logkiss.logkiss.KissRotatingFileHandler-functions","title":"Functions","text":""},{"location":"api/logkiss/#logkiss.logkiss.KissRotatingFileHandler.__init__","title":"<code>__init__(filename, mode='a', maxBytes=0, backupCount=0, encoding=None, delay=False, color_config=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>Log file path</p> required <code>mode</code> <code>str</code> <p>File open mode</p> <code>'a'</code> <code>maxBytes</code> <code>int</code> <p>Maximum log file size</p> <code>0</code> <code>backupCount</code> <code>int</code> <p>Number of backup files</p> <code>0</code> <code>encoding</code> <code>Optional[str]</code> <p>File encoding</p> <code>None</code> <code>delay</code> <code>bool</code> <p>Delay file open</p> <code>False</code> <code>color_config</code> <code>Optional[Union[str, Path]]</code> <p>Path to color configuration file</p> <code>None</code> Source code in <code>logkiss/logkiss.py</code> <pre><code>def __init__(self, filename: str,\n             mode: str = 'a', maxBytes: int = 0,\n             backupCount: int = 0, encoding: Optional[str] = None,\n             delay: bool = False,\n             color_config: Optional[Union[str, Path]] = None):\n    \"\"\"\n    Args:\n        filename: Log file path\n        mode: File open mode\n        maxBytes: Maximum log file size\n        backupCount: Number of backup files\n        encoding: File encoding\n        delay: Delay file open\n        color_config: Path to color configuration file\n    \"\"\"\n    super().__init__(filename, mode, maxBytes, backupCount, encoding, delay)\n    self.formatter = ColoredFormatter(color_config=color_config, use_color=False)\n    self.setFormatter(self.formatter)\n</code></pre>"},{"location":"api/logkiss/#logkiss.logkiss.KissTimedRotatingFileHandler","title":"<code>KissTimedRotatingFileHandler</code>","text":"<p>               Bases: <code>TimedRotatingFileHandler</code></p> <p>Handler that outputs log messages to a timed rotating file.</p> <p>This handler extends the standard logging.handlers.TimedRotatingFileHandler to use the ColoredFormatter by default, with colors disabled.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>Log file path.</p> required <code>when</code> <code>str</code> <p>Rotation timing. Default is 'h' (hourly).</p> <code>'h'</code> <code>interval</code> <code>int</code> <p>Rotation interval. Default is 1.</p> <code>1</code> <code>backupCount</code> <code>int</code> <p>Number of backup files to keep. Default is 0 (no backups).</p> <code>0</code> <code>encoding</code> <code>Optional[str]</code> <p>File encoding. Default is None (system default).</p> <code>None</code> <code>delay</code> <code>bool</code> <p>Whether to delay opening the file until the first log. Default is False.</p> <code>False</code> <code>utc</code> <code>bool</code> <p>Whether to use UTC time. Default is False (local time).</p> <code>False</code> <code>atTime</code> <code>Optional[time]</code> <p>Time of day to rotate. Default is None.</p> <code>None</code> <code>color_config</code> <code>Optional[Union[str, Path]]</code> <p>Path to color configuration file. Default is None.</p> <code>None</code> Source code in <code>logkiss/logkiss.py</code> <pre><code>class KissTimedRotatingFileHandler(TimedRotatingFileHandler):\n    \"\"\"Handler that outputs log messages to a timed rotating file.\n\n    This handler extends the standard logging.handlers.TimedRotatingFileHandler\n    to use the ColoredFormatter by default, with colors disabled.\n\n    Args:\n        filename: Log file path.\n        when: Rotation timing. Default is 'h' (hourly).\n        interval: Rotation interval. Default is 1.\n        backupCount: Number of backup files to keep. Default is 0 (no backups).\n        encoding: File encoding. Default is None (system default).\n        delay: Whether to delay opening the file until the first log. Default is False.\n        utc: Whether to use UTC time. Default is False (local time).\n        atTime: Time of day to rotate. Default is None.\n        color_config: Path to color configuration file. Default is None.\n    \"\"\"\n\n    def __init__(self, filename: str,\n                 when: str = 'h', interval: int = 1,\n                 backupCount: int = 0, encoding: Optional[str] = None,\n                 delay: bool = False, utc: bool = False,\n                 atTime: Optional[datetime.time] = None,\n                 color_config: Optional[Union[str, Path]] = None):\n        \"\"\"\n        Args:\n            filename: Log file path\n            when: Rotation timing\n            interval: Rotation interval\n            backupCount: Number of backup files\n            encoding: File encoding\n            delay: Delay file open\n            utc: Use UTC time\n            atTime: Rotation time\n            color_config: Path to color configuration file\n        \"\"\"\n        super().__init__(filename, when, interval, backupCount, encoding, delay, utc, atTime)\n        self.formatter = ColoredFormatter(color_config=color_config, use_color=False)\n        self.setFormatter(self.formatter)\n</code></pre>"},{"location":"api/logkiss/#logkiss.logkiss.KissTimedRotatingFileHandler-functions","title":"Functions","text":""},{"location":"api/logkiss/#logkiss.logkiss.KissTimedRotatingFileHandler.__init__","title":"<code>__init__(filename, when='h', interval=1, backupCount=0, encoding=None, delay=False, utc=False, atTime=None, color_config=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>Log file path</p> required <code>when</code> <code>str</code> <p>Rotation timing</p> <code>'h'</code> <code>interval</code> <code>int</code> <p>Rotation interval</p> <code>1</code> <code>backupCount</code> <code>int</code> <p>Number of backup files</p> <code>0</code> <code>encoding</code> <code>Optional[str]</code> <p>File encoding</p> <code>None</code> <code>delay</code> <code>bool</code> <p>Delay file open</p> <code>False</code> <code>utc</code> <code>bool</code> <p>Use UTC time</p> <code>False</code> <code>atTime</code> <code>Optional[time]</code> <p>Rotation time</p> <code>None</code> <code>color_config</code> <code>Optional[Union[str, Path]]</code> <p>Path to color configuration file</p> <code>None</code> Source code in <code>logkiss/logkiss.py</code> <pre><code>def __init__(self, filename: str,\n             when: str = 'h', interval: int = 1,\n             backupCount: int = 0, encoding: Optional[str] = None,\n             delay: bool = False, utc: bool = False,\n             atTime: Optional[datetime.time] = None,\n             color_config: Optional[Union[str, Path]] = None):\n    \"\"\"\n    Args:\n        filename: Log file path\n        when: Rotation timing\n        interval: Rotation interval\n        backupCount: Number of backup files\n        encoding: File encoding\n        delay: Delay file open\n        utc: Use UTC time\n        atTime: Rotation time\n        color_config: Path to color configuration file\n    \"\"\"\n    super().__init__(filename, when, interval, backupCount, encoding, delay, utc, atTime)\n    self.formatter = ColoredFormatter(color_config=color_config, use_color=False)\n    self.setFormatter(self.formatter)\n</code></pre>"},{"location":"api/logkiss/#logkiss.logkiss.PathShortenerFilter","title":"<code>PathShortenerFilter</code>","text":"<p>               Bases: <code>Filter</code></p> <p>Filter to shorten paths in log messages</p> <p>Shortens long paths to \".../\" format. Example: \"/very/long/path/to/module.py\" -&gt; \".../to/module.py\" <p>Controlled by environment variable LOGKISS_PATH_SHORTEN: - 0 or invalid value: Disable path shortening - Positive integer: Show last n components</p> Source code in <code>logkiss/logkiss.py</code> <pre><code>class PathShortenerFilter(Filter):\n    \"\"\"Filter to shorten paths in log messages\n\n    Shortens long paths to \".../&lt;last_n_components&gt;\" format.\n    Example: \"/very/long/path/to/module.py\" -&gt; \".../to/module.py\"\n\n    Controlled by environment variable LOGKISS_PATH_SHORTEN:\n    - 0 or invalid value: Disable path shortening\n    - Positive integer: Show last n components\n    \"\"\"\n    def __init__(self):\n        super().__init__()\n\n    def filter(self, record):\n        if PATH_SHORTEN &gt; 0:\n            # Split path into components\n            components = record.pathname.split('/')\n\n            # Get last n components\n            if len(components) &gt; PATH_SHORTEN:\n                shortened = '/'.join(['...'] + components[-PATH_SHORTEN:])\n                record.filename = shortened\n\n        return True\n</code></pre>"},{"location":"api/logkiss/#logkiss.logkiss-functions","title":"Functions","text":""},{"location":"api/logkiss/#logkiss.logkiss.use_console_handler","title":"<code>use_console_handler(logger=None)</code>","text":"<p>Configure the logger to use a standard StreamHandler instead of KissConsoleHandler.</p> <p>This function removes any existing KissConsoleHandler from the specified logger and adds a standard StreamHandler with a basic formatter. This is useful when you want to disable the colored output and use a simple console handler.</p> <p>Parameters:</p> Name Type Description Default <code>logger</code> <code>Optional[Logger]</code> <p>Logger to configure. Default is None (root logger).</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Example <p>import logkiss as logging logger = logging.getLogger(name) logging.use_console_handler(logger) logger.info('This message will be displayed without color')</p> Source code in <code>logkiss/logkiss.py</code> <pre><code>def use_console_handler(logger: Optional[logging.Logger] = None) -&gt; None:\n    \"\"\"Configure the logger to use a standard StreamHandler instead of KissConsoleHandler.\n\n    This function removes any existing KissConsoleHandler from the specified logger\n    and adds a standard StreamHandler with a basic formatter. This is useful when\n    you want to disable the colored output and use a simple console handler.\n\n    Args:\n        logger: Logger to configure. Default is None (root logger).\n\n    Returns:\n        None\n\n    Example:\n        &gt;&gt;&gt; import logkiss as logging\n        &gt;&gt;&gt; logger = logging.getLogger(__name__)\n        &gt;&gt;&gt; logging.use_console_handler(logger)\n        &gt;&gt;&gt; logger.info('This message will be displayed without color')\n    \"\"\"\n    # Get the root logger if no logger is specified\n    if logger is None:\n        logger = logging.getLogger()\n\n    # Remove KissConsoleHandler\n    for handler in logger.handlers[:]:\n        if isinstance(handler, KissConsoleHandler):\n            logger.removeHandler(handler)\n\n    # Add standard ConsoleHandler\n    handler = StreamHandler()\n    handler.setFormatter(Formatter(\n        fmt='%(asctime)s,%(msecs)03d %(levelname)-5s | %(filename)s:%(lineno)3d | %(message)s',\n        datefmt='%Y-%m-%d %H:%M:%S'\n    ))\n    logger.addHandler(handler)\n</code></pre>"},{"location":"en/#quick-start","title":"Quick Start","text":"<pre><code>import logkiss as logging\n\n# Get a logger\nlogger = logging.getLogger(__name__)\n\n# Output logs\nlogger.debug(\"Debug message\")\nlogger.info(\"Info message\")\nlogger.warning(\"Warning message\")\nlogger.error(\"Error message\")\nlogger.critical(\"Critical error message\")\n</code></pre>"},{"location":"en/#installation","title":"Installation","text":"<pre><code>pip install logkiss\n</code></pre> <p>For cloud logging features:</p> <pre><code>pip install \"logkiss[cloud]\"\n</code></pre>"},{"location":"en/#license","title":"License","text":"<p>Distributed under the MIT License. See LICENSE for more information.</p>"},{"location":"en/usage/","title":"Usage","text":""},{"location":"en/usage/#basic-usage","title":"Basic Usage","text":"<p>logkiss is compatible with the standard Python logging module and can be used in a similar way.</p> <pre><code>import logkiss as logging\n\n# Get a logger\nlogger = logging.getLogger(__name__)\n\n# Set log level\nlogger.setLevel(logging.DEBUG)\n\n# Output logs\nlogger.debug(\"Debug message\")\nlogger.info(\"Info message\")\nlogger.warning(\"Warning message\")\nlogger.error(\"Error message\")\nlogger.critical(\"Critical error message\")\n</code></pre>"},{"location":"en/usage/#using-kissconsolehandler","title":"Using KissConsoleHandler","text":"<p>The main feature of logkiss is the <code>KissConsoleHandler</code> which provides colorful console output.</p> <pre><code>import logkiss as logging\n\n# Get a logger\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\n# Clear existing handlers\nfor handler in logger.handlers[:]:\n    logger.removeHandler(handler)\n\n# Add KissConsoleHandler\nconsole_handler = logging.KissConsoleHandler()\nlogger.addHandler(console_handler)\n\n# Output logs\nlogger.debug(\"Debug message\")\nlogger.info(\"Info message\")\nlogger.warning(\"Warning message\")\nlogger.error(\"Error message\")\nlogger.critical(\"Critical error message\")\n</code></pre>"},{"location":"en/usage/#disabling-colors","title":"Disabling Colors","text":"<p>In some environments, you may not want colored output. You can disable colors as follows:</p> <pre><code>import logkiss as logging\n\n# Get a logger\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\n# Clear existing handlers\nfor handler in logger.handlers[:]:\n    logger.removeHandler(handler)\n\n# Create a formatter with colors disabled\nformatter = logging.ColoredFormatter(use_color=False)\n\n# Add KissConsoleHandler and set formatter\nconsole_handler = logging.KissConsoleHandler()\nconsole_handler.setFormatter(formatter)\nlogger.addHandler(console_handler)\n\n# Output logs\nlogger.debug(\"Debug message without color\")\nlogger.info(\"Info message without color\")\nlogger.warning(\"Warning message without color\")\nlogger.error(\"Error message without color\")\n</code></pre>"},{"location":"en/usage/#logging-to-a-file","title":"Logging to a File","text":"<p>To log to a file, use the <code>KissFileHandler</code>:</p> <pre><code>import logkiss as logging\n\n# Get a logger\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\n# Add KissFileHandler\nfile_handler = logging.KissFileHandler(\"app.log\")\nlogger.addHandler(file_handler)\n\n# Output logs\nlogger.debug(\"Debug message to file\")\nlogger.info(\"Info message to file\")\n</code></pre>"},{"location":"en/usage/#logging-to-aws-cloudwatch","title":"Logging to AWS CloudWatch","text":"<p>To send logs to AWS CloudWatch, use the <code>AWSCloudWatchHandler</code>:</p> <pre><code>import logkiss as logging\nfrom logkiss.handlers import AWSCloudWatchHandler\n\n# Get a logger\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\n# Add AWSCloudWatchHandler\naws_handler = AWSCloudWatchHandler(\n    log_group_name=\"my-log-group\",\n    log_stream_name=\"my-log-stream\",\n    region_name=\"ap-northeast-1\"\n)\nlogger.addHandler(aws_handler)\n\n# Output logs\nlogger.info(\"Info message sent to AWS CloudWatch\")\n</code></pre>"},{"location":"en/usage/#logging-to-google-cloud-logging","title":"Logging to Google Cloud Logging","text":"<p>To send logs to Google Cloud Logging, use the <code>GCPCloudLoggingHandler</code>:</p> <p>```python import logkiss as logging from logkiss.handlers import GCPCloudLoggingHandler</p>"},{"location":"en/usage/#get-a-logger","title":"Get a logger","text":"<p>logger = logging.getLogger(name) logger.setLevel(logging.DEBUG)</p>"},{"location":"en/usage/#add-gcpcloudlogginghandler","title":"Add GCPCloudLoggingHandler","text":"<p>gcp_handler = GCPCloudLoggingHandler(     project_id=\"my-gcp-project\",     log_name=\"my-log\" ) logger.addHandler(gcp_handler)</p>"},{"location":"en/usage/#output-logs","title":"Output logs","text":"<p>logger.info(\"Info message sent to Google Cloud Logging\")</p>"},{"location":"ja/","title":"logkiss","text":"<p>logkiss\u306f\u3001\u30b7\u30f3\u30d7\u30eb\u3067\u7f8e\u3057\u3044Python\u30ed\u30ae\u30f3\u30b0\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002</p>"},{"location":"ja/#_1","title":"\u7279\u5fb4","text":"<ul> <li>\u30ab\u30e9\u30d5\u30eb\u306a\u30ed\u30b0\u51fa\u529b - \u30ed\u30b0\u30ec\u30d9\u30eb\u306b\u5fdc\u3058\u305f\u8272\u5206\u3051\u3067\u8996\u8a8d\u6027\u5411\u4e0a</li> <li>\u30b7\u30f3\u30d7\u30eb\u306aAPI - \u6a19\u6e96\u306ePython\u30ed\u30ae\u30f3\u30b0\u3068\u4e92\u63db\u6027\u306e\u3042\u308b\u4f7f\u3044\u3084\u3059\u3044API</li> <li>\u30af\u30e9\u30a6\u30c9\u5bfe\u5fdc - AWS CloudWatch\u3068Google Cloud Logging\u3092\u30b5\u30dd\u30fc\u30c8</li> <li>\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u53ef\u80fd - \u8272\u3084\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u7c21\u5358\u306b\u30ab\u30b9\u30bf\u30de\u30a4\u30ba</li> </ul>"},{"location":"ja/#_2","title":"\u30af\u30a4\u30c3\u30af\u30b9\u30bf\u30fc\u30c8","text":"<pre><code>import logkiss as logging\n\n# \u30ed\u30ac\u30fc\u306e\u53d6\u5f97\nlogger = logging.getLogger(__name__)\n\n# \u30ed\u30b0\u306e\u51fa\u529b\nlogger.debug(\"\u30c7\u30d0\u30c3\u30b0\u30e1\u30c3\u30bb\u30fc\u30b8\")\nlogger.info(\"\u60c5\u5831\u30e1\u30c3\u30bb\u30fc\u30b8\")\nlogger.warning(\"\u8b66\u544a\u30e1\u30c3\u30bb\u30fc\u30b8\")\nlogger.error(\"\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\")\nlogger.critical(\"\u81f4\u547d\u7684\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\")\n</code></pre>"},{"location":"ja/#_3","title":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":"<pre><code>pip install logkiss\n</code></pre> <p>\u30af\u30e9\u30a6\u30c9\u30ed\u30ae\u30f3\u30b0\u6a5f\u80fd\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\uff1a</p> <pre><code>pip install \"logkiss[cloud]\"\n</code></pre>"},{"location":"ja/#_4","title":"\u30e9\u30a4\u30bb\u30f3\u30b9","text":"<p>MIT\u30e9\u30a4\u30bb\u30f3\u30b9\u306e\u4e0b\u3067\u914d\u5e03\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u8a73\u7d30\u306fLICENSE\u30d5\u30a1\u30a4\u30eb\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"ja/api/handlers/","title":"\u30cf\u30f3\u30c9\u30e9\u30fc\u30e2\u30b8\u30e5\u30fc\u30eb","text":"<p>logkiss\u306e\u30cf\u30f3\u30c9\u30e9\u30fc\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u306f\u3001\u69d8\u3005\u306a\u51fa\u529b\u5148\u306b\u30ed\u30b0\u3092\u9001\u4fe1\u3059\u308b\u305f\u3081\u306e\u30cf\u30f3\u30c9\u30e9\u30fc\u30af\u30e9\u30b9\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"ja/api/logkiss/","title":"logkiss \u30b3\u30a2\u30e2\u30b8\u30e5\u30fc\u30eb","text":"<p>logkiss\u306e\u30b3\u30a2\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u306f\u3001\u30ab\u30e9\u30d5\u30eb\u306a\u30ed\u30b0\u51fa\u529b\u306e\u305f\u3081\u306e\u57fa\u672c\u7684\u306a\u30af\u30e9\u30b9\u3068\u95a2\u6570\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"zh/","title":"logkiss","text":"<p>logkiss\u662f\u4e00\u4e2a\u7b80\u5355\u800c\u7f8e\u89c2\u7684Python\u65e5\u5fd7\u5e93\u3002</p>"},{"location":"zh/#_1","title":"\u7279\u70b9","text":"<ul> <li>\u5f69\u8272\u65e5\u5fd7\u8f93\u51fa - \u901a\u8fc7\u989c\u8272\u7f16\u7801\u7684\u65e5\u5fd7\u7ea7\u522b\u63d0\u9ad8\u53ef\u89c1\u6027</li> <li>\u7b80\u5355API - \u6613\u4e8e\u4f7f\u7528\u7684API\uff0c\u4e0e\u6807\u51c6Python\u65e5\u5fd7\u517c\u5bb9</li> <li>\u4e91\u5c31\u7eea - \u652f\u6301AWS CloudWatch\u548cGoogle Cloud Logging</li> <li>\u53ef\u5b9a\u5236 - \u8f7b\u677e\u81ea\u5b9a\u4e49\u989c\u8272\u548c\u683c\u5f0f</li> </ul>"},{"location":"zh/#_2","title":"\u5feb\u901f\u5f00\u59cb","text":"<pre><code>import logkiss as logging\n\n# \u83b7\u53d6\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogger = logging.getLogger(__name__)\n\n# \u8f93\u51fa\u65e5\u5fd7\nlogger.debug(\"\u8c03\u8bd5\u4fe1\u606f\")\nlogger.info(\"\u4fe1\u606f\u6d88\u606f\")\nlogger.warning(\"\u8b66\u544a\u6d88\u606f\")\nlogger.error(\"\u9519\u8bef\u6d88\u606f\")\nlogger.critical(\"\u4e25\u91cd\u9519\u8bef\u6d88\u606f\")\n</code></pre>"},{"location":"zh/#_3","title":"\u5b89\u88c5","text":"<pre><code>pip install logkiss\n</code></pre> <p>\u5bf9\u4e8e\u4e91\u65e5\u5fd7\u529f\u80fd\uff1a</p> <pre><code>pip install \"logkiss[cloud]\"\n</code></pre>"},{"location":"zh/#_4","title":"\u8bb8\u53ef\u8bc1","text":"<p>\u6839\u636eMIT\u8bb8\u53ef\u8bc1\u5206\u53d1\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605LICENSE\u6587\u4ef6\u3002</p>"},{"location":"zh/installation/","title":"\u5b89\u88c5","text":""},{"location":"zh/installation/#_2","title":"\u8981\u6c42","text":"<ul> <li>Python 3.8\u6216\u66f4\u9ad8\u7248\u672c</li> </ul>"},{"location":"zh/installation/#pip","title":"\u4f7f\u7528pip\u5b89\u88c5","text":"<p>\u6700\u7b80\u5355\u7684\u5b89\u88c5\u65b9\u6cd5\u662f\u4f7f\u7528pip\uff1a</p> <pre><code>pip install logkiss\n</code></pre> <p>\u5bf9\u4e8e\u4e91\u65e5\u5fd7\u529f\u80fd\uff08AWS CloudWatch\u548cGoogle Cloud Logging\uff09\uff1a</p> <pre><code>pip install \"logkiss[cloud]\"\n</code></pre>"},{"location":"zh/installation/#pdm","title":"\u4f7f\u7528PDM\u5b89\u88c5","text":"<p>\u5982\u679c\u60a8\u4f7f\u7528PDM\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u5b89\u88c5\uff1a</p> <pre><code>pdm add logkiss\n</code></pre> <p>\u5bf9\u4e8e\u4e91\u65e5\u5fd7\u529f\u80fd\uff1a</p> <pre><code>pdm add \"logkiss[cloud]\"\n</code></pre>"},{"location":"zh/installation/#poetry","title":"\u4f7f\u7528Poetry\u5b89\u88c5","text":"<p>\u5982\u679c\u60a8\u4f7f\u7528Poetry\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u5b89\u88c5\uff1a</p> <pre><code>poetry add logkiss\n</code></pre> <p>\u5bf9\u4e8e\u4e91\u65e5\u5fd7\u529f\u80fd\uff1a</p> <pre><code>poetry add \"logkiss[cloud]\"\n</code></pre>"},{"location":"zh/installation/#_3","title":"\u4ece\u6e90\u4ee3\u7801\u5b89\u88c5","text":"<p>\u5982\u679c\u60a8\u60f3\u4f7f\u7528\u6700\u65b0\u7684\u5f00\u53d1\u7248\u672c\uff0c\u53ef\u4ee5\u514b\u9686GitHub\u4ed3\u5e93\u5e76\u76f4\u63a5\u5b89\u88c5\uff1a</p> <pre><code>git clone https://github.com/yourusername/logkiss.git\ncd logkiss\npip install -e .\n</code></pre>"},{"location":"zh/installation/#_4","title":"\u4f9d\u8d56\u9879","text":"<ul> <li>\u5fc5\u9700: PyYAML</li> <li>\u53ef\u9009: </li> <li>\u5bf9\u4e8eAWS CloudWatch: boto3</li> <li>\u5bf9\u4e8eGoogle Cloud Logging: google-cloud-logging</li> </ul>"},{"location":"zh/usage/","title":"\u4f7f\u7528\u65b9\u6cd5","text":""},{"location":"zh/usage/#_2","title":"\u57fa\u672c\u7528\u6cd5","text":"<p>logkiss\u4e0e\u6807\u51c6Python\u65e5\u5fd7\u6a21\u5757\u517c\u5bb9\uff0c\u53ef\u4ee5\u4ee5\u7c7b\u4f3c\u7684\u65b9\u5f0f\u4f7f\u7528\u3002</p> <pre><code>import logkiss as logging\n\n# \u83b7\u53d6\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogger = logging.getLogger(__name__)\n\n# \u8bbe\u7f6e\u65e5\u5fd7\u7ea7\u522b\nlogger.setLevel(logging.DEBUG)\n\n# \u8f93\u51fa\u65e5\u5fd7\nlogger.debug(\"\u8c03\u8bd5\u4fe1\u606f\")\nlogger.info(\"\u4fe1\u606f\u6d88\u606f\")\nlogger.warning(\"\u8b66\u544a\u6d88\u606f\")\nlogger.error(\"\u9519\u8bef\u6d88\u606f\")\nlogger.critical(\"\u4e25\u91cd\u9519\u8bef\u6d88\u606f\")\n</code></pre>"},{"location":"zh/usage/#kissconsolehandler","title":"\u4f7f\u7528KissConsoleHandler","text":"<p>logkiss\u7684\u4e3b\u8981\u7279\u70b9\u662f<code>KissConsoleHandler</code>\uff0c\u5b83\u63d0\u4f9b\u5f69\u8272\u63a7\u5236\u53f0\u8f93\u51fa\u3002</p> <pre><code>import logkiss as logging\n\n# \u83b7\u53d6\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\n# \u6e05\u9664\u73b0\u6709\u5904\u7406\u5668\nfor handler in logger.handlers[:]:\n    logger.removeHandler(handler)\n\n# \u6dfb\u52a0KissConsoleHandler\nconsole_handler = logging.KissConsoleHandler()\nlogger.addHandler(console_handler)\n\n# \u8f93\u51fa\u65e5\u5fd7\nlogger.debug(\"\u8c03\u8bd5\u4fe1\u606f\")\nlogger.info(\"\u4fe1\u606f\u6d88\u606f\")\nlogger.warning(\"\u8b66\u544a\u6d88\u606f\")\nlogger.error(\"\u9519\u8bef\u6d88\u606f\")\nlogger.critical(\"\u4e25\u91cd\u9519\u8bef\u6d88\u606f\")\n</code></pre>"},{"location":"zh/usage/#_3","title":"\u7981\u7528\u989c\u8272","text":"<p>\u5728\u67d0\u4e9b\u73af\u5883\u4e2d\uff0c\u60a8\u53ef\u80fd\u4e0d\u9700\u8981\u5f69\u8272\u8f93\u51fa\u3002\u60a8\u53ef\u4ee5\u6309\u5982\u4e0b\u65b9\u5f0f\u7981\u7528\u989c\u8272\uff1a</p> <pre><code>import logkiss as logging\n\n# \u83b7\u53d6\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\n# \u6e05\u9664\u73b0\u6709\u5904\u7406\u5668\nfor handler in logger.handlers[:]:\n    logger.removeHandler(handler)\n\n# \u521b\u5efa\u7981\u7528\u989c\u8272\u7684\u683c\u5f0f\u5316\u5668\nformatter = logging.ColoredFormatter(use_color=False)\n\n# \u6dfb\u52a0KissConsoleHandler\u5e76\u8bbe\u7f6e\u683c\u5f0f\u5316\u5668\nconsole_handler = logging.KissConsoleHandler()\nconsole_handler.setFormatter(formatter)\nlogger.addHandler(console_handler)\n\n# \u8f93\u51fa\u65e5\u5fd7\nlogger.debug(\"\u65e0\u989c\u8272\u7684\u8c03\u8bd5\u4fe1\u606f\")\nlogger.info(\"\u65e0\u989c\u8272\u7684\u4fe1\u606f\u6d88\u606f\")\nlogger.warning(\"\u65e0\u989c\u8272\u7684\u8b66\u544a\u6d88\u606f\")\nlogger.error(\"\u65e0\u989c\u8272\u7684\u9519\u8bef\u6d88\u606f\")\n</code></pre>"},{"location":"zh/usage/#_4","title":"\u8bb0\u5f55\u5230\u6587\u4ef6","text":"<p>\u8981\u8bb0\u5f55\u5230\u6587\u4ef6\uff0c\u8bf7\u4f7f\u7528<code>KissFileHandler</code>\uff1a</p> <pre><code>import logkiss as logging\n\n# \u83b7\u53d6\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\n# \u6dfb\u52a0KissFileHandler\nfile_handler = logging.KissFileHandler(\"app.log\")\nlogger.addHandler(file_handler)\n\n# \u8f93\u51fa\u65e5\u5fd7\nlogger.debug(\"\u5199\u5165\u6587\u4ef6\u7684\u8c03\u8bd5\u4fe1\u606f\")\nlogger.info(\"\u5199\u5165\u6587\u4ef6\u7684\u4fe1\u606f\u6d88\u606f\")\n</code></pre>"},{"location":"zh/usage/#aws-cloudwatch","title":"\u8bb0\u5f55\u5230AWS CloudWatch","text":"<p>\u8981\u5c06\u65e5\u5fd7\u53d1\u9001\u5230AWS CloudWatch\uff0c\u8bf7\u4f7f\u7528<code>AWSCloudWatchHandler</code>\uff1a</p> <pre><code>import logkiss as logging\nfrom logkiss.handlers import AWSCloudWatchHandler\n\n# \u83b7\u53d6\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\n# \u6dfb\u52a0AWSCloudWatchHandler\naws_handler = AWSCloudWatchHandler(\n    log_group_name=\"my-log-group\",\n    log_stream_name=\"my-log-stream\",\n    region_name=\"ap-northeast-1\"\n)\nlogger.addHandler(aws_handler)\n\n# \u8f93\u51fa\u65e5\u5fd7\nlogger.info(\"\u53d1\u9001\u5230AWS CloudWatch\u7684\u4fe1\u606f\u6d88\u606f\")\n</code></pre>"},{"location":"zh/usage/#google-cloud-logging","title":"\u8bb0\u5f55\u5230Google Cloud Logging","text":"<p>\u8981\u5c06\u65e5\u5fd7\u53d1\u9001\u5230Google Cloud Logging\uff0c\u8bf7\u4f7f\u7528<code>GCPCloudLoggingHandler</code>\uff1a</p> <pre><code>import logkiss as logging\nfrom logkiss.handlers import GCPCloudLoggingHandler\n\n# \u83b7\u53d6\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\n# \u6dfb\u52a0GCPCloudLoggingHandler\ngcp_handler = GCPCloudLoggingHandler(\n    project_id=\"my-gcp-project\",\n    log_name=\"my-log\"\n)\nlogger.addHandler(gcp_handler)\n\n# \u8f93\u51fa\u65e5\u5fd7\nlogger.info(\"\u53d1\u9001\u5230Google Cloud Logging\u7684\u4fe1\u606f\u6d88\u606f\")\n</code></pre>"},{"location":"zh/api/handlers/","title":"\u5904\u7406\u5668\u6a21\u5757","text":"<p>logkiss\u5904\u7406\u5668\u6a21\u5757\u5305\u542b\u7528\u4e8e\u5c06\u65e5\u5fd7\u53d1\u9001\u5230\u5404\u79cd\u76ee\u6807\u7684\u5904\u7406\u5668\u7c7b\u3002</p>"},{"location":"zh/api/logkiss/","title":"logkiss \u6838\u5fc3\u6a21\u5757","text":"<p>logkiss\u6838\u5fc3\u6a21\u5757\u5305\u542b\u7528\u4e8e\u5f69\u8272\u65e5\u5fd7\u8f93\u51fa\u7684\u57fa\u672c\u7c7b\u548c\u51fd\u6570\u3002</p>"},{"location":"ja/api/logkiss/#logkiss.logkiss.use_console_handler","title":"<code>use_console_handler(logger=None)</code>","text":"<p>Configure the logger to use a standard StreamHandler instead of KissConsoleHandler.</p> <p>This function removes any existing KissConsoleHandler from the specified logger and adds a standard StreamHandler with a basic formatter. This is useful when you want to disable the colored output and use a simple console handler.</p> <p>Parameters:</p> Name Type Description Default <code>logger</code> <code>Optional[Logger]</code> <p>Logger to configure. Default is None (root logger).</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Example <p>import logkiss as logging logger = logging.getLogger(name) logging.use_console_handler(logger) logger.info('This message will be displayed without color')</p> Source code in <code>logkiss/logkiss.py</code> <pre><code>def use_console_handler(logger: Optional[logging.Logger] = None) -&gt; None:\n    \"\"\"Configure the logger to use a standard StreamHandler instead of KissConsoleHandler.\n\n    This function removes any existing KissConsoleHandler from the specified logger\n    and adds a standard StreamHandler with a basic formatter. This is useful when\n    you want to disable the colored output and use a simple console handler.\n\n    Args:\n        logger: Logger to configure. Default is None (root logger).\n\n    Returns:\n        None\n\n    Example:\n        &gt;&gt;&gt; import logkiss as logging\n        &gt;&gt;&gt; logger = logging.getLogger(__name__)\n        &gt;&gt;&gt; logging.use_console_handler(logger)\n        &gt;&gt;&gt; logger.info('This message will be displayed without color')\n    \"\"\"\n    # Get the root logger if no logger is specified\n    if logger is None:\n        logger = logging.getLogger()\n\n    # Remove KissConsoleHandler\n    for handler in logger.handlers[:]:\n        if isinstance(handler, KissConsoleHandler):\n            logger.removeHandler(handler)\n\n    # Add standard ConsoleHandler\n    handler = StreamHandler()\n    handler.setFormatter(Formatter(\n        fmt='%(asctime)s,%(msecs)03d %(levelname)-5s | %(filename)s:%(lineno)3d | %(message)s',\n        datefmt='%Y-%m-%d %H:%M:%S'\n    ))\n    logger.addHandler(handler)\n</code></pre>"},{"location":"ja/en/#quick-start","title":"Quick Start","text":"<pre><code>import logkiss as logging\n\n# Get a logger\nlogger = logging.getLogger(__name__)\n\n# Output logs\nlogger.debug(\"Debug message\")\nlogger.info(\"Info message\")\nlogger.warning(\"Warning message\")\nlogger.error(\"Error message\")\nlogger.critical(\"Critical error message\")\n</code></pre>"},{"location":"ja/en/#installation","title":"Installation","text":"<pre><code>pip install logkiss\n</code></pre> <p>For cloud logging features:</p> <pre><code>pip install \"logkiss[cloud]\"\n</code></pre>"},{"location":"ja/en/#license","title":"License","text":"<p>Distributed under the MIT License. See LICENSE for more information.</p>"},{"location":"ja/en/usage/","title":"Usage","text":""},{"location":"ja/en/usage/#basic-usage","title":"Basic Usage","text":"<p>logkiss is compatible with the standard Python logging module and can be used in a similar way.</p> <pre><code>import logkiss as logging\n\n# Get a logger\nlogger = logging.getLogger(__name__)\n\n# Set log level\nlogger.setLevel(logging.DEBUG)\n\n# Output logs\nlogger.debug(\"Debug message\")\nlogger.info(\"Info message\")\nlogger.warning(\"Warning message\")\nlogger.error(\"Error message\")\nlogger.critical(\"Critical error message\")\n</code></pre>"},{"location":"ja/en/usage/#using-kissconsolehandler","title":"Using KissConsoleHandler","text":"<p>The main feature of logkiss is the <code>KissConsoleHandler</code> which provides colorful console output.</p> <pre><code>import logkiss as logging\n\n# Get a logger\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\n# Clear existing handlers\nfor handler in logger.handlers[:]:\n    logger.removeHandler(handler)\n\n# Add KissConsoleHandler\nconsole_handler = logging.KissConsoleHandler()\nlogger.addHandler(console_handler)\n\n# Output logs\nlogger.debug(\"Debug message\")\nlogger.info(\"Info message\")\nlogger.warning(\"Warning message\")\nlogger.error(\"Error message\")\nlogger.critical(\"Critical error message\")\n</code></pre>"},{"location":"ja/en/usage/#disabling-colors","title":"Disabling Colors","text":"<p>In some environments, you may not want colored output. You can disable colors as follows:</p> <pre><code>import logkiss as logging\n\n# Get a logger\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\n# Clear existing handlers\nfor handler in logger.handlers[:]:\n    logger.removeHandler(handler)\n\n# Create a formatter with colors disabled\nformatter = logging.ColoredFormatter(use_color=False)\n\n# Add KissConsoleHandler and set formatter\nconsole_handler = logging.KissConsoleHandler()\nconsole_handler.setFormatter(formatter)\nlogger.addHandler(console_handler)\n\n# Output logs\nlogger.debug(\"Debug message without color\")\nlogger.info(\"Info message without color\")\nlogger.warning(\"Warning message without color\")\nlogger.error(\"Error message without color\")\n</code></pre>"},{"location":"ja/en/usage/#logging-to-a-file","title":"Logging to a File","text":"<p>To log to a file, use the <code>KissFileHandler</code>:</p> <pre><code>import logkiss as logging\n\n# Get a logger\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\n# Add KissFileHandler\nfile_handler = logging.KissFileHandler(\"app.log\")\nlogger.addHandler(file_handler)\n\n# Output logs\nlogger.debug(\"Debug message to file\")\nlogger.info(\"Info message to file\")\n</code></pre>"},{"location":"ja/en/usage/#logging-to-aws-cloudwatch","title":"Logging to AWS CloudWatch","text":"<p>To send logs to AWS CloudWatch, use the <code>AWSCloudWatchHandler</code>:</p> <pre><code>import logkiss as logging\nfrom logkiss.handlers import AWSCloudWatchHandler\n\n# Get a logger\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\n# Add AWSCloudWatchHandler\naws_handler = AWSCloudWatchHandler(\n    log_group_name=\"my-log-group\",\n    log_stream_name=\"my-log-stream\",\n    region_name=\"ap-northeast-1\"\n)\nlogger.addHandler(aws_handler)\n\n# Output logs\nlogger.info(\"Info message sent to AWS CloudWatch\")\n</code></pre>"},{"location":"ja/en/usage/#logging-to-google-cloud-logging","title":"Logging to Google Cloud Logging","text":"<p>To send logs to Google Cloud Logging, use the <code>GCPCloudLoggingHandler</code>:</p> <p>```python import logkiss as logging from logkiss.handlers import GCPCloudLoggingHandler</p>"},{"location":"ja/en/usage/#get-a-logger","title":"Get a logger","text":"<p>logger = logging.getLogger(name) logger.setLevel(logging.DEBUG)</p>"},{"location":"ja/en/usage/#add-gcpcloudlogginghandler","title":"Add GCPCloudLoggingHandler","text":"<p>gcp_handler = GCPCloudLoggingHandler(     project_id=\"my-gcp-project\",     log_name=\"my-log\" ) logger.addHandler(gcp_handler)</p>"},{"location":"ja/en/usage/#output-logs","title":"Output logs","text":"<p>logger.info(\"Info message sent to Google Cloud Logging\")</p>"},{"location":"ja/ja/","title":"logkiss","text":"<p>logkiss\u306f\u3001\u30b7\u30f3\u30d7\u30eb\u3067\u7f8e\u3057\u3044Python\u30ed\u30ae\u30f3\u30b0\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002</p>"},{"location":"ja/ja/#_1","title":"\u7279\u5fb4","text":"<ul> <li>\u30ab\u30e9\u30d5\u30eb\u306a\u30ed\u30b0\u51fa\u529b - \u30ed\u30b0\u30ec\u30d9\u30eb\u306b\u5fdc\u3058\u305f\u8272\u5206\u3051\u3067\u8996\u8a8d\u6027\u5411\u4e0a</li> <li>\u30b7\u30f3\u30d7\u30eb\u306aAPI - \u6a19\u6e96\u306ePython\u30ed\u30ae\u30f3\u30b0\u3068\u4e92\u63db\u6027\u306e\u3042\u308b\u4f7f\u3044\u3084\u3059\u3044API</li> <li>\u30af\u30e9\u30a6\u30c9\u5bfe\u5fdc - AWS CloudWatch\u3068Google Cloud Logging\u3092\u30b5\u30dd\u30fc\u30c8</li> <li>\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u53ef\u80fd - \u8272\u3084\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u7c21\u5358\u306b\u30ab\u30b9\u30bf\u30de\u30a4\u30ba</li> </ul>"},{"location":"ja/ja/#_2","title":"\u30af\u30a4\u30c3\u30af\u30b9\u30bf\u30fc\u30c8","text":"<pre><code>import logkiss as logging\n\n# \u30ed\u30ac\u30fc\u306e\u53d6\u5f97\nlogger = logging.getLogger(__name__)\n\n# \u30ed\u30b0\u306e\u51fa\u529b\nlogger.debug(\"\u30c7\u30d0\u30c3\u30b0\u30e1\u30c3\u30bb\u30fc\u30b8\")\nlogger.info(\"\u60c5\u5831\u30e1\u30c3\u30bb\u30fc\u30b8\")\nlogger.warning(\"\u8b66\u544a\u30e1\u30c3\u30bb\u30fc\u30b8\")\nlogger.error(\"\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\")\nlogger.critical(\"\u81f4\u547d\u7684\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\")\n</code></pre>"},{"location":"ja/ja/#_3","title":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":"<pre><code>pip install logkiss\n</code></pre> <p>\u30af\u30e9\u30a6\u30c9\u30ed\u30ae\u30f3\u30b0\u6a5f\u80fd\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\uff1a</p> <pre><code>pip install \"logkiss[cloud]\"\n</code></pre>"},{"location":"ja/ja/#_4","title":"\u30e9\u30a4\u30bb\u30f3\u30b9","text":"<p>MIT\u30e9\u30a4\u30bb\u30f3\u30b9\u306e\u4e0b\u3067\u914d\u5e03\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u8a73\u7d30\u306fLICENSE\u30d5\u30a1\u30a4\u30eb\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"ja/ja/api/handlers/","title":"\u30cf\u30f3\u30c9\u30e9\u30fc\u30e2\u30b8\u30e5\u30fc\u30eb","text":"<p>logkiss\u306e\u30cf\u30f3\u30c9\u30e9\u30fc\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u306f\u3001\u69d8\u3005\u306a\u51fa\u529b\u5148\u306b\u30ed\u30b0\u3092\u9001\u4fe1\u3059\u308b\u305f\u3081\u306e\u30cf\u30f3\u30c9\u30e9\u30fc\u30af\u30e9\u30b9\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"ja/ja/api/logkiss/","title":"logkiss \u30b3\u30a2\u30e2\u30b8\u30e5\u30fc\u30eb","text":"<p>logkiss\u306e\u30b3\u30a2\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u306f\u3001\u30ab\u30e9\u30d5\u30eb\u306a\u30ed\u30b0\u51fa\u529b\u306e\u305f\u3081\u306e\u57fa\u672c\u7684\u306a\u30af\u30e9\u30b9\u3068\u95a2\u6570\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"ja/zh/","title":"logkiss","text":"<p>logkiss\u662f\u4e00\u4e2a\u7b80\u5355\u800c\u7f8e\u89c2\u7684Python\u65e5\u5fd7\u5e93\u3002</p>"},{"location":"ja/zh/#_1","title":"\u7279\u70b9","text":"<ul> <li>\u5f69\u8272\u65e5\u5fd7\u8f93\u51fa - \u901a\u8fc7\u989c\u8272\u7f16\u7801\u7684\u65e5\u5fd7\u7ea7\u522b\u63d0\u9ad8\u53ef\u89c1\u6027</li> <li>\u7b80\u5355API - \u6613\u4e8e\u4f7f\u7528\u7684API\uff0c\u4e0e\u6807\u51c6Python\u65e5\u5fd7\u517c\u5bb9</li> <li>\u4e91\u5c31\u7eea - \u652f\u6301AWS CloudWatch\u548cGoogle Cloud Logging</li> <li>\u53ef\u5b9a\u5236 - \u8f7b\u677e\u81ea\u5b9a\u4e49\u989c\u8272\u548c\u683c\u5f0f</li> </ul>"},{"location":"ja/zh/#_2","title":"\u5feb\u901f\u5f00\u59cb","text":"<pre><code>import logkiss as logging\n\n# \u83b7\u53d6\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogger = logging.getLogger(__name__)\n\n# \u8f93\u51fa\u65e5\u5fd7\nlogger.debug(\"\u8c03\u8bd5\u4fe1\u606f\")\nlogger.info(\"\u4fe1\u606f\u6d88\u606f\")\nlogger.warning(\"\u8b66\u544a\u6d88\u606f\")\nlogger.error(\"\u9519\u8bef\u6d88\u606f\")\nlogger.critical(\"\u4e25\u91cd\u9519\u8bef\u6d88\u606f\")\n</code></pre>"},{"location":"ja/zh/#_3","title":"\u5b89\u88c5","text":"<pre><code>pip install logkiss\n</code></pre> <p>\u5bf9\u4e8e\u4e91\u65e5\u5fd7\u529f\u80fd\uff1a</p> <pre><code>pip install \"logkiss[cloud]\"\n</code></pre>"},{"location":"ja/zh/#_4","title":"\u8bb8\u53ef\u8bc1","text":"<p>\u6839\u636eMIT\u8bb8\u53ef\u8bc1\u5206\u53d1\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605LICENSE\u6587\u4ef6\u3002</p>"},{"location":"ja/zh/installation/","title":"\u5b89\u88c5","text":""},{"location":"ja/zh/installation/#_2","title":"\u8981\u6c42","text":"<ul> <li>Python 3.8\u6216\u66f4\u9ad8\u7248\u672c</li> </ul>"},{"location":"ja/zh/installation/#pip","title":"\u4f7f\u7528pip\u5b89\u88c5","text":"<p>\u6700\u7b80\u5355\u7684\u5b89\u88c5\u65b9\u6cd5\u662f\u4f7f\u7528pip\uff1a</p> <pre><code>pip install logkiss\n</code></pre> <p>\u5bf9\u4e8e\u4e91\u65e5\u5fd7\u529f\u80fd\uff08AWS CloudWatch\u548cGoogle Cloud Logging\uff09\uff1a</p> <pre><code>pip install \"logkiss[cloud]\"\n</code></pre>"},{"location":"ja/zh/installation/#pdm","title":"\u4f7f\u7528PDM\u5b89\u88c5","text":"<p>\u5982\u679c\u60a8\u4f7f\u7528PDM\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u5b89\u88c5\uff1a</p> <pre><code>pdm add logkiss\n</code></pre> <p>\u5bf9\u4e8e\u4e91\u65e5\u5fd7\u529f\u80fd\uff1a</p> <pre><code>pdm add \"logkiss[cloud]\"\n</code></pre>"},{"location":"ja/zh/installation/#poetry","title":"\u4f7f\u7528Poetry\u5b89\u88c5","text":"<p>\u5982\u679c\u60a8\u4f7f\u7528Poetry\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u5b89\u88c5\uff1a</p> <pre><code>poetry add logkiss\n</code></pre> <p>\u5bf9\u4e8e\u4e91\u65e5\u5fd7\u529f\u80fd\uff1a</p> <pre><code>poetry add \"logkiss[cloud]\"\n</code></pre>"},{"location":"ja/zh/installation/#_3","title":"\u4ece\u6e90\u4ee3\u7801\u5b89\u88c5","text":"<p>\u5982\u679c\u60a8\u60f3\u4f7f\u7528\u6700\u65b0\u7684\u5f00\u53d1\u7248\u672c\uff0c\u53ef\u4ee5\u514b\u9686GitHub\u4ed3\u5e93\u5e76\u76f4\u63a5\u5b89\u88c5\uff1a</p> <pre><code>git clone https://github.com/yourusername/logkiss.git\ncd logkiss\npip install -e .\n</code></pre>"},{"location":"ja/zh/installation/#_4","title":"\u4f9d\u8d56\u9879","text":"<ul> <li>\u5fc5\u9700: PyYAML</li> <li>\u53ef\u9009: </li> <li>\u5bf9\u4e8eAWS CloudWatch: boto3</li> <li>\u5bf9\u4e8eGoogle Cloud Logging: google-cloud-logging</li> </ul>"},{"location":"ja/zh/usage/","title":"\u4f7f\u7528\u65b9\u6cd5","text":""},{"location":"ja/zh/usage/#_2","title":"\u57fa\u672c\u7528\u6cd5","text":"<p>logkiss\u4e0e\u6807\u51c6Python\u65e5\u5fd7\u6a21\u5757\u517c\u5bb9\uff0c\u53ef\u4ee5\u4ee5\u7c7b\u4f3c\u7684\u65b9\u5f0f\u4f7f\u7528\u3002</p> <pre><code>import logkiss as logging\n\n# \u83b7\u53d6\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogger = logging.getLogger(__name__)\n\n# \u8bbe\u7f6e\u65e5\u5fd7\u7ea7\u522b\nlogger.setLevel(logging.DEBUG)\n\n# \u8f93\u51fa\u65e5\u5fd7\nlogger.debug(\"\u8c03\u8bd5\u4fe1\u606f\")\nlogger.info(\"\u4fe1\u606f\u6d88\u606f\")\nlogger.warning(\"\u8b66\u544a\u6d88\u606f\")\nlogger.error(\"\u9519\u8bef\u6d88\u606f\")\nlogger.critical(\"\u4e25\u91cd\u9519\u8bef\u6d88\u606f\")\n</code></pre>"},{"location":"ja/zh/usage/#kissconsolehandler","title":"\u4f7f\u7528KissConsoleHandler","text":"<p>logkiss\u7684\u4e3b\u8981\u7279\u70b9\u662f<code>KissConsoleHandler</code>\uff0c\u5b83\u63d0\u4f9b\u5f69\u8272\u63a7\u5236\u53f0\u8f93\u51fa\u3002</p> <pre><code>import logkiss as logging\n\n# \u83b7\u53d6\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\n# \u6e05\u9664\u73b0\u6709\u5904\u7406\u5668\nfor handler in logger.handlers[:]:\n    logger.removeHandler(handler)\n\n# \u6dfb\u52a0KissConsoleHandler\nconsole_handler = logging.KissConsoleHandler()\nlogger.addHandler(console_handler)\n\n# \u8f93\u51fa\u65e5\u5fd7\nlogger.debug(\"\u8c03\u8bd5\u4fe1\u606f\")\nlogger.info(\"\u4fe1\u606f\u6d88\u606f\")\nlogger.warning(\"\u8b66\u544a\u6d88\u606f\")\nlogger.error(\"\u9519\u8bef\u6d88\u606f\")\nlogger.critical(\"\u4e25\u91cd\u9519\u8bef\u6d88\u606f\")\n</code></pre>"},{"location":"ja/zh/usage/#_3","title":"\u7981\u7528\u989c\u8272","text":"<p>\u5728\u67d0\u4e9b\u73af\u5883\u4e2d\uff0c\u60a8\u53ef\u80fd\u4e0d\u9700\u8981\u5f69\u8272\u8f93\u51fa\u3002\u60a8\u53ef\u4ee5\u6309\u5982\u4e0b\u65b9\u5f0f\u7981\u7528\u989c\u8272\uff1a</p> <pre><code>import logkiss as logging\n\n# \u83b7\u53d6\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\n# \u6e05\u9664\u73b0\u6709\u5904\u7406\u5668\nfor handler in logger.handlers[:]:\n    logger.removeHandler(handler)\n\n# \u521b\u5efa\u7981\u7528\u989c\u8272\u7684\u683c\u5f0f\u5316\u5668\nformatter = logging.ColoredFormatter(use_color=False)\n\n# \u6dfb\u52a0KissConsoleHandler\u5e76\u8bbe\u7f6e\u683c\u5f0f\u5316\u5668\nconsole_handler = logging.KissConsoleHandler()\nconsole_handler.setFormatter(formatter)\nlogger.addHandler(console_handler)\n\n# \u8f93\u51fa\u65e5\u5fd7\nlogger.debug(\"\u65e0\u989c\u8272\u7684\u8c03\u8bd5\u4fe1\u606f\")\nlogger.info(\"\u65e0\u989c\u8272\u7684\u4fe1\u606f\u6d88\u606f\")\nlogger.warning(\"\u65e0\u989c\u8272\u7684\u8b66\u544a\u6d88\u606f\")\nlogger.error(\"\u65e0\u989c\u8272\u7684\u9519\u8bef\u6d88\u606f\")\n</code></pre>"},{"location":"ja/zh/usage/#_4","title":"\u8bb0\u5f55\u5230\u6587\u4ef6","text":"<p>\u8981\u8bb0\u5f55\u5230\u6587\u4ef6\uff0c\u8bf7\u4f7f\u7528<code>KissFileHandler</code>\uff1a</p> <pre><code>import logkiss as logging\n\n# \u83b7\u53d6\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\n# \u6dfb\u52a0KissFileHandler\nfile_handler = logging.KissFileHandler(\"app.log\")\nlogger.addHandler(file_handler)\n\n# \u8f93\u51fa\u65e5\u5fd7\nlogger.debug(\"\u5199\u5165\u6587\u4ef6\u7684\u8c03\u8bd5\u4fe1\u606f\")\nlogger.info(\"\u5199\u5165\u6587\u4ef6\u7684\u4fe1\u606f\u6d88\u606f\")\n</code></pre>"},{"location":"ja/zh/usage/#aws-cloudwatch","title":"\u8bb0\u5f55\u5230AWS CloudWatch","text":"<p>\u8981\u5c06\u65e5\u5fd7\u53d1\u9001\u5230AWS CloudWatch\uff0c\u8bf7\u4f7f\u7528<code>AWSCloudWatchHandler</code>\uff1a</p> <pre><code>import logkiss as logging\nfrom logkiss.handlers import AWSCloudWatchHandler\n\n# \u83b7\u53d6\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\n# \u6dfb\u52a0AWSCloudWatchHandler\naws_handler = AWSCloudWatchHandler(\n    log_group_name=\"my-log-group\",\n    log_stream_name=\"my-log-stream\",\n    region_name=\"ap-northeast-1\"\n)\nlogger.addHandler(aws_handler)\n\n# \u8f93\u51fa\u65e5\u5fd7\nlogger.info(\"\u53d1\u9001\u5230AWS CloudWatch\u7684\u4fe1\u606f\u6d88\u606f\")\n</code></pre>"},{"location":"ja/zh/usage/#google-cloud-logging","title":"\u8bb0\u5f55\u5230Google Cloud Logging","text":"<p>\u8981\u5c06\u65e5\u5fd7\u53d1\u9001\u5230Google Cloud Logging\uff0c\u8bf7\u4f7f\u7528<code>GCPCloudLoggingHandler</code>\uff1a</p> <pre><code>import logkiss as logging\nfrom logkiss.handlers import GCPCloudLoggingHandler\n\n# \u83b7\u53d6\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\n# \u6dfb\u52a0GCPCloudLoggingHandler\ngcp_handler = GCPCloudLoggingHandler(\n    project_id=\"my-gcp-project\",\n    log_name=\"my-log\"\n)\nlogger.addHandler(gcp_handler)\n\n# \u8f93\u51fa\u65e5\u5fd7\nlogger.info(\"\u53d1\u9001\u5230Google Cloud Logging\u7684\u4fe1\u606f\u6d88\u606f\")\n</code></pre>"},{"location":"ja/zh/api/handlers/","title":"\u5904\u7406\u5668\u6a21\u5757","text":"<p>logkiss\u5904\u7406\u5668\u6a21\u5757\u5305\u542b\u7528\u4e8e\u5c06\u65e5\u5fd7\u53d1\u9001\u5230\u5404\u79cd\u76ee\u6807\u7684\u5904\u7406\u5668\u7c7b\u3002</p>"},{"location":"ja/zh/api/logkiss/","title":"logkiss \u6838\u5fc3\u6a21\u5757","text":"<p>logkiss\u6838\u5fc3\u6a21\u5757\u5305\u542b\u7528\u4e8e\u5f69\u8272\u65e5\u5fd7\u8f93\u51fa\u7684\u57fa\u672c\u7c7b\u548c\u51fd\u6570\u3002</p>"},{"location":"zh/api/logkiss/#logkiss.logkiss.use_console_handler","title":"<code>use_console_handler(logger=None)</code>","text":"<p>Configure the logger to use a standard StreamHandler instead of KissConsoleHandler.</p> <p>This function removes any existing KissConsoleHandler from the specified logger and adds a standard StreamHandler with a basic formatter. This is useful when you want to disable the colored output and use a simple console handler.</p> <p>Parameters:</p> Name Type Description Default <code>logger</code> <code>Optional[Logger]</code> <p>Logger to configure. Default is None (root logger).</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Example <p>import logkiss as logging logger = logging.getLogger(name) logging.use_console_handler(logger) logger.info('This message will be displayed without color')</p> Source code in <code>logkiss/logkiss.py</code> <pre><code>def use_console_handler(logger: Optional[logging.Logger] = None) -&gt; None:\n    \"\"\"Configure the logger to use a standard StreamHandler instead of KissConsoleHandler.\n\n    This function removes any existing KissConsoleHandler from the specified logger\n    and adds a standard StreamHandler with a basic formatter. This is useful when\n    you want to disable the colored output and use a simple console handler.\n\n    Args:\n        logger: Logger to configure. Default is None (root logger).\n\n    Returns:\n        None\n\n    Example:\n        &gt;&gt;&gt; import logkiss as logging\n        &gt;&gt;&gt; logger = logging.getLogger(__name__)\n        &gt;&gt;&gt; logging.use_console_handler(logger)\n        &gt;&gt;&gt; logger.info('This message will be displayed without color')\n    \"\"\"\n    # Get the root logger if no logger is specified\n    if logger is None:\n        logger = logging.getLogger()\n\n    # Remove KissConsoleHandler\n    for handler in logger.handlers[:]:\n        if isinstance(handler, KissConsoleHandler):\n            logger.removeHandler(handler)\n\n    # Add standard ConsoleHandler\n    handler = StreamHandler()\n    handler.setFormatter(Formatter(\n        fmt='%(asctime)s,%(msecs)03d %(levelname)-5s | %(filename)s:%(lineno)3d | %(message)s',\n        datefmt='%Y-%m-%d %H:%M:%S'\n    ))\n    logger.addHandler(handler)\n</code></pre>"},{"location":"zh/en/#quick-start","title":"Quick Start","text":"<pre><code>import logkiss as logging\n\n# Get a logger\nlogger = logging.getLogger(__name__)\n\n# Output logs\nlogger.debug(\"Debug message\")\nlogger.info(\"Info message\")\nlogger.warning(\"Warning message\")\nlogger.error(\"Error message\")\nlogger.critical(\"Critical error message\")\n</code></pre>"},{"location":"zh/en/#installation","title":"Installation","text":"<pre><code>pip install logkiss\n</code></pre> <p>For cloud logging features:</p> <pre><code>pip install \"logkiss[cloud]\"\n</code></pre>"},{"location":"zh/en/#license","title":"License","text":"<p>Distributed under the MIT License. See LICENSE for more information.</p>"},{"location":"zh/en/usage/","title":"Usage","text":""},{"location":"zh/en/usage/#basic-usage","title":"Basic Usage","text":"<p>logkiss is compatible with the standard Python logging module and can be used in a similar way.</p> <pre><code>import logkiss as logging\n\n# Get a logger\nlogger = logging.getLogger(__name__)\n\n# Set log level\nlogger.setLevel(logging.DEBUG)\n\n# Output logs\nlogger.debug(\"Debug message\")\nlogger.info(\"Info message\")\nlogger.warning(\"Warning message\")\nlogger.error(\"Error message\")\nlogger.critical(\"Critical error message\")\n</code></pre>"},{"location":"zh/en/usage/#using-kissconsolehandler","title":"Using KissConsoleHandler","text":"<p>The main feature of logkiss is the <code>KissConsoleHandler</code> which provides colorful console output.</p> <pre><code>import logkiss as logging\n\n# Get a logger\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\n# Clear existing handlers\nfor handler in logger.handlers[:]:\n    logger.removeHandler(handler)\n\n# Add KissConsoleHandler\nconsole_handler = logging.KissConsoleHandler()\nlogger.addHandler(console_handler)\n\n# Output logs\nlogger.debug(\"Debug message\")\nlogger.info(\"Info message\")\nlogger.warning(\"Warning message\")\nlogger.error(\"Error message\")\nlogger.critical(\"Critical error message\")\n</code></pre>"},{"location":"zh/en/usage/#disabling-colors","title":"Disabling Colors","text":"<p>In some environments, you may not want colored output. You can disable colors as follows:</p> <pre><code>import logkiss as logging\n\n# Get a logger\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\n# Clear existing handlers\nfor handler in logger.handlers[:]:\n    logger.removeHandler(handler)\n\n# Create a formatter with colors disabled\nformatter = logging.ColoredFormatter(use_color=False)\n\n# Add KissConsoleHandler and set formatter\nconsole_handler = logging.KissConsoleHandler()\nconsole_handler.setFormatter(formatter)\nlogger.addHandler(console_handler)\n\n# Output logs\nlogger.debug(\"Debug message without color\")\nlogger.info(\"Info message without color\")\nlogger.warning(\"Warning message without color\")\nlogger.error(\"Error message without color\")\n</code></pre>"},{"location":"zh/en/usage/#logging-to-a-file","title":"Logging to a File","text":"<p>To log to a file, use the <code>KissFileHandler</code>:</p> <pre><code>import logkiss as logging\n\n# Get a logger\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\n# Add KissFileHandler\nfile_handler = logging.KissFileHandler(\"app.log\")\nlogger.addHandler(file_handler)\n\n# Output logs\nlogger.debug(\"Debug message to file\")\nlogger.info(\"Info message to file\")\n</code></pre>"},{"location":"zh/en/usage/#logging-to-aws-cloudwatch","title":"Logging to AWS CloudWatch","text":"<p>To send logs to AWS CloudWatch, use the <code>AWSCloudWatchHandler</code>:</p> <pre><code>import logkiss as logging\nfrom logkiss.handlers import AWSCloudWatchHandler\n\n# Get a logger\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\n# Add AWSCloudWatchHandler\naws_handler = AWSCloudWatchHandler(\n    log_group_name=\"my-log-group\",\n    log_stream_name=\"my-log-stream\",\n    region_name=\"ap-northeast-1\"\n)\nlogger.addHandler(aws_handler)\n\n# Output logs\nlogger.info(\"Info message sent to AWS CloudWatch\")\n</code></pre>"},{"location":"zh/en/usage/#logging-to-google-cloud-logging","title":"Logging to Google Cloud Logging","text":"<p>To send logs to Google Cloud Logging, use the <code>GCPCloudLoggingHandler</code>:</p> <p>```python import logkiss as logging from logkiss.handlers import GCPCloudLoggingHandler</p>"},{"location":"zh/en/usage/#get-a-logger","title":"Get a logger","text":"<p>logger = logging.getLogger(name) logger.setLevel(logging.DEBUG)</p>"},{"location":"zh/en/usage/#add-gcpcloudlogginghandler","title":"Add GCPCloudLoggingHandler","text":"<p>gcp_handler = GCPCloudLoggingHandler(     project_id=\"my-gcp-project\",     log_name=\"my-log\" ) logger.addHandler(gcp_handler)</p>"},{"location":"zh/en/usage/#output-logs","title":"Output logs","text":"<p>logger.info(\"Info message sent to Google Cloud Logging\")</p>"},{"location":"zh/ja/","title":"logkiss","text":"<p>logkiss\u306f\u3001\u30b7\u30f3\u30d7\u30eb\u3067\u7f8e\u3057\u3044Python\u30ed\u30ae\u30f3\u30b0\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002</p>"},{"location":"zh/ja/#_1","title":"\u7279\u5fb4","text":"<ul> <li>\u30ab\u30e9\u30d5\u30eb\u306a\u30ed\u30b0\u51fa\u529b - \u30ed\u30b0\u30ec\u30d9\u30eb\u306b\u5fdc\u3058\u305f\u8272\u5206\u3051\u3067\u8996\u8a8d\u6027\u5411\u4e0a</li> <li>\u30b7\u30f3\u30d7\u30eb\u306aAPI - \u6a19\u6e96\u306ePython\u30ed\u30ae\u30f3\u30b0\u3068\u4e92\u63db\u6027\u306e\u3042\u308b\u4f7f\u3044\u3084\u3059\u3044API</li> <li>\u30af\u30e9\u30a6\u30c9\u5bfe\u5fdc - AWS CloudWatch\u3068Google Cloud Logging\u3092\u30b5\u30dd\u30fc\u30c8</li> <li>\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u53ef\u80fd - \u8272\u3084\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u7c21\u5358\u306b\u30ab\u30b9\u30bf\u30de\u30a4\u30ba</li> </ul>"},{"location":"zh/ja/#_2","title":"\u30af\u30a4\u30c3\u30af\u30b9\u30bf\u30fc\u30c8","text":"<pre><code>import logkiss as logging\n\n# \u30ed\u30ac\u30fc\u306e\u53d6\u5f97\nlogger = logging.getLogger(__name__)\n\n# \u30ed\u30b0\u306e\u51fa\u529b\nlogger.debug(\"\u30c7\u30d0\u30c3\u30b0\u30e1\u30c3\u30bb\u30fc\u30b8\")\nlogger.info(\"\u60c5\u5831\u30e1\u30c3\u30bb\u30fc\u30b8\")\nlogger.warning(\"\u8b66\u544a\u30e1\u30c3\u30bb\u30fc\u30b8\")\nlogger.error(\"\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\")\nlogger.critical(\"\u81f4\u547d\u7684\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\")\n</code></pre>"},{"location":"zh/ja/#_3","title":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":"<pre><code>pip install logkiss\n</code></pre> <p>\u30af\u30e9\u30a6\u30c9\u30ed\u30ae\u30f3\u30b0\u6a5f\u80fd\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\uff1a</p> <pre><code>pip install \"logkiss[cloud]\"\n</code></pre>"},{"location":"zh/ja/#_4","title":"\u30e9\u30a4\u30bb\u30f3\u30b9","text":"<p>MIT\u30e9\u30a4\u30bb\u30f3\u30b9\u306e\u4e0b\u3067\u914d\u5e03\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u8a73\u7d30\u306fLICENSE\u30d5\u30a1\u30a4\u30eb\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"zh/ja/api/handlers/","title":"\u30cf\u30f3\u30c9\u30e9\u30fc\u30e2\u30b8\u30e5\u30fc\u30eb","text":"<p>logkiss\u306e\u30cf\u30f3\u30c9\u30e9\u30fc\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u306f\u3001\u69d8\u3005\u306a\u51fa\u529b\u5148\u306b\u30ed\u30b0\u3092\u9001\u4fe1\u3059\u308b\u305f\u3081\u306e\u30cf\u30f3\u30c9\u30e9\u30fc\u30af\u30e9\u30b9\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"zh/ja/api/logkiss/","title":"logkiss \u30b3\u30a2\u30e2\u30b8\u30e5\u30fc\u30eb","text":"<p>logkiss\u306e\u30b3\u30a2\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u306f\u3001\u30ab\u30e9\u30d5\u30eb\u306a\u30ed\u30b0\u51fa\u529b\u306e\u305f\u3081\u306e\u57fa\u672c\u7684\u306a\u30af\u30e9\u30b9\u3068\u95a2\u6570\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"zh/zh/","title":"logkiss","text":"<p>logkiss\u662f\u4e00\u4e2a\u7b80\u5355\u800c\u7f8e\u89c2\u7684Python\u65e5\u5fd7\u5e93\u3002</p>"},{"location":"zh/zh/#_1","title":"\u7279\u70b9","text":"<ul> <li>\u5f69\u8272\u65e5\u5fd7\u8f93\u51fa - \u901a\u8fc7\u989c\u8272\u7f16\u7801\u7684\u65e5\u5fd7\u7ea7\u522b\u63d0\u9ad8\u53ef\u89c1\u6027</li> <li>\u7b80\u5355API - \u6613\u4e8e\u4f7f\u7528\u7684API\uff0c\u4e0e\u6807\u51c6Python\u65e5\u5fd7\u517c\u5bb9</li> <li>\u4e91\u5c31\u7eea - \u652f\u6301AWS CloudWatch\u548cGoogle Cloud Logging</li> <li>\u53ef\u5b9a\u5236 - \u8f7b\u677e\u81ea\u5b9a\u4e49\u989c\u8272\u548c\u683c\u5f0f</li> </ul>"},{"location":"zh/zh/#_2","title":"\u5feb\u901f\u5f00\u59cb","text":"<pre><code>import logkiss as logging\n\n# \u83b7\u53d6\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogger = logging.getLogger(__name__)\n\n# \u8f93\u51fa\u65e5\u5fd7\nlogger.debug(\"\u8c03\u8bd5\u4fe1\u606f\")\nlogger.info(\"\u4fe1\u606f\u6d88\u606f\")\nlogger.warning(\"\u8b66\u544a\u6d88\u606f\")\nlogger.error(\"\u9519\u8bef\u6d88\u606f\")\nlogger.critical(\"\u4e25\u91cd\u9519\u8bef\u6d88\u606f\")\n</code></pre>"},{"location":"zh/zh/#_3","title":"\u5b89\u88c5","text":"<pre><code>pip install logkiss\n</code></pre> <p>\u5bf9\u4e8e\u4e91\u65e5\u5fd7\u529f\u80fd\uff1a</p> <pre><code>pip install \"logkiss[cloud]\"\n</code></pre>"},{"location":"zh/zh/#_4","title":"\u8bb8\u53ef\u8bc1","text":"<p>\u6839\u636eMIT\u8bb8\u53ef\u8bc1\u5206\u53d1\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605LICENSE\u6587\u4ef6\u3002</p>"},{"location":"zh/zh/installation/","title":"\u5b89\u88c5","text":""},{"location":"zh/zh/installation/#_2","title":"\u8981\u6c42","text":"<ul> <li>Python 3.8\u6216\u66f4\u9ad8\u7248\u672c</li> </ul>"},{"location":"zh/zh/installation/#pip","title":"\u4f7f\u7528pip\u5b89\u88c5","text":"<p>\u6700\u7b80\u5355\u7684\u5b89\u88c5\u65b9\u6cd5\u662f\u4f7f\u7528pip\uff1a</p> <pre><code>pip install logkiss\n</code></pre> <p>\u5bf9\u4e8e\u4e91\u65e5\u5fd7\u529f\u80fd\uff08AWS CloudWatch\u548cGoogle Cloud Logging\uff09\uff1a</p> <pre><code>pip install \"logkiss[cloud]\"\n</code></pre>"},{"location":"zh/zh/installation/#pdm","title":"\u4f7f\u7528PDM\u5b89\u88c5","text":"<p>\u5982\u679c\u60a8\u4f7f\u7528PDM\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u5b89\u88c5\uff1a</p> <pre><code>pdm add logkiss\n</code></pre> <p>\u5bf9\u4e8e\u4e91\u65e5\u5fd7\u529f\u80fd\uff1a</p> <pre><code>pdm add \"logkiss[cloud]\"\n</code></pre>"},{"location":"zh/zh/installation/#poetry","title":"\u4f7f\u7528Poetry\u5b89\u88c5","text":"<p>\u5982\u679c\u60a8\u4f7f\u7528Poetry\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u5b89\u88c5\uff1a</p> <pre><code>poetry add logkiss\n</code></pre> <p>\u5bf9\u4e8e\u4e91\u65e5\u5fd7\u529f\u80fd\uff1a</p> <pre><code>poetry add \"logkiss[cloud]\"\n</code></pre>"},{"location":"zh/zh/installation/#_3","title":"\u4ece\u6e90\u4ee3\u7801\u5b89\u88c5","text":"<p>\u5982\u679c\u60a8\u60f3\u4f7f\u7528\u6700\u65b0\u7684\u5f00\u53d1\u7248\u672c\uff0c\u53ef\u4ee5\u514b\u9686GitHub\u4ed3\u5e93\u5e76\u76f4\u63a5\u5b89\u88c5\uff1a</p> <pre><code>git clone https://github.com/yourusername/logkiss.git\ncd logkiss\npip install -e .\n</code></pre>"},{"location":"zh/zh/installation/#_4","title":"\u4f9d\u8d56\u9879","text":"<ul> <li>\u5fc5\u9700: PyYAML</li> <li>\u53ef\u9009: </li> <li>\u5bf9\u4e8eAWS CloudWatch: boto3</li> <li>\u5bf9\u4e8eGoogle Cloud Logging: google-cloud-logging</li> </ul>"},{"location":"zh/zh/usage/","title":"\u4f7f\u7528\u65b9\u6cd5","text":""},{"location":"zh/zh/usage/#_2","title":"\u57fa\u672c\u7528\u6cd5","text":"<p>logkiss\u4e0e\u6807\u51c6Python\u65e5\u5fd7\u6a21\u5757\u517c\u5bb9\uff0c\u53ef\u4ee5\u4ee5\u7c7b\u4f3c\u7684\u65b9\u5f0f\u4f7f\u7528\u3002</p> <pre><code>import logkiss as logging\n\n# \u83b7\u53d6\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogger = logging.getLogger(__name__)\n\n# \u8bbe\u7f6e\u65e5\u5fd7\u7ea7\u522b\nlogger.setLevel(logging.DEBUG)\n\n# \u8f93\u51fa\u65e5\u5fd7\nlogger.debug(\"\u8c03\u8bd5\u4fe1\u606f\")\nlogger.info(\"\u4fe1\u606f\u6d88\u606f\")\nlogger.warning(\"\u8b66\u544a\u6d88\u606f\")\nlogger.error(\"\u9519\u8bef\u6d88\u606f\")\nlogger.critical(\"\u4e25\u91cd\u9519\u8bef\u6d88\u606f\")\n</code></pre>"},{"location":"zh/zh/usage/#kissconsolehandler","title":"\u4f7f\u7528KissConsoleHandler","text":"<p>logkiss\u7684\u4e3b\u8981\u7279\u70b9\u662f<code>KissConsoleHandler</code>\uff0c\u5b83\u63d0\u4f9b\u5f69\u8272\u63a7\u5236\u53f0\u8f93\u51fa\u3002</p> <pre><code>import logkiss as logging\n\n# \u83b7\u53d6\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\n# \u6e05\u9664\u73b0\u6709\u5904\u7406\u5668\nfor handler in logger.handlers[:]:\n    logger.removeHandler(handler)\n\n# \u6dfb\u52a0KissConsoleHandler\nconsole_handler = logging.KissConsoleHandler()\nlogger.addHandler(console_handler)\n\n# \u8f93\u51fa\u65e5\u5fd7\nlogger.debug(\"\u8c03\u8bd5\u4fe1\u606f\")\nlogger.info(\"\u4fe1\u606f\u6d88\u606f\")\nlogger.warning(\"\u8b66\u544a\u6d88\u606f\")\nlogger.error(\"\u9519\u8bef\u6d88\u606f\")\nlogger.critical(\"\u4e25\u91cd\u9519\u8bef\u6d88\u606f\")\n</code></pre>"},{"location":"zh/zh/usage/#_3","title":"\u7981\u7528\u989c\u8272","text":"<p>\u5728\u67d0\u4e9b\u73af\u5883\u4e2d\uff0c\u60a8\u53ef\u80fd\u4e0d\u9700\u8981\u5f69\u8272\u8f93\u51fa\u3002\u60a8\u53ef\u4ee5\u6309\u5982\u4e0b\u65b9\u5f0f\u7981\u7528\u989c\u8272\uff1a</p> <pre><code>import logkiss as logging\n\n# \u83b7\u53d6\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\n# \u6e05\u9664\u73b0\u6709\u5904\u7406\u5668\nfor handler in logger.handlers[:]:\n    logger.removeHandler(handler)\n\n# \u521b\u5efa\u7981\u7528\u989c\u8272\u7684\u683c\u5f0f\u5316\u5668\nformatter = logging.ColoredFormatter(use_color=False)\n\n# \u6dfb\u52a0KissConsoleHandler\u5e76\u8bbe\u7f6e\u683c\u5f0f\u5316\u5668\nconsole_handler = logging.KissConsoleHandler()\nconsole_handler.setFormatter(formatter)\nlogger.addHandler(console_handler)\n\n# \u8f93\u51fa\u65e5\u5fd7\nlogger.debug(\"\u65e0\u989c\u8272\u7684\u8c03\u8bd5\u4fe1\u606f\")\nlogger.info(\"\u65e0\u989c\u8272\u7684\u4fe1\u606f\u6d88\u606f\")\nlogger.warning(\"\u65e0\u989c\u8272\u7684\u8b66\u544a\u6d88\u606f\")\nlogger.error(\"\u65e0\u989c\u8272\u7684\u9519\u8bef\u6d88\u606f\")\n</code></pre>"},{"location":"zh/zh/usage/#_4","title":"\u8bb0\u5f55\u5230\u6587\u4ef6","text":"<p>\u8981\u8bb0\u5f55\u5230\u6587\u4ef6\uff0c\u8bf7\u4f7f\u7528<code>KissFileHandler</code>\uff1a</p> <pre><code>import logkiss as logging\n\n# \u83b7\u53d6\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\n# \u6dfb\u52a0KissFileHandler\nfile_handler = logging.KissFileHandler(\"app.log\")\nlogger.addHandler(file_handler)\n\n# \u8f93\u51fa\u65e5\u5fd7\nlogger.debug(\"\u5199\u5165\u6587\u4ef6\u7684\u8c03\u8bd5\u4fe1\u606f\")\nlogger.info(\"\u5199\u5165\u6587\u4ef6\u7684\u4fe1\u606f\u6d88\u606f\")\n</code></pre>"},{"location":"zh/zh/usage/#aws-cloudwatch","title":"\u8bb0\u5f55\u5230AWS CloudWatch","text":"<p>\u8981\u5c06\u65e5\u5fd7\u53d1\u9001\u5230AWS CloudWatch\uff0c\u8bf7\u4f7f\u7528<code>AWSCloudWatchHandler</code>\uff1a</p> <pre><code>import logkiss as logging\nfrom logkiss.handlers import AWSCloudWatchHandler\n\n# \u83b7\u53d6\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\n# \u6dfb\u52a0AWSCloudWatchHandler\naws_handler = AWSCloudWatchHandler(\n    log_group_name=\"my-log-group\",\n    log_stream_name=\"my-log-stream\",\n    region_name=\"ap-northeast-1\"\n)\nlogger.addHandler(aws_handler)\n\n# \u8f93\u51fa\u65e5\u5fd7\nlogger.info(\"\u53d1\u9001\u5230AWS CloudWatch\u7684\u4fe1\u606f\u6d88\u606f\")\n</code></pre>"},{"location":"zh/zh/usage/#google-cloud-logging","title":"\u8bb0\u5f55\u5230Google Cloud Logging","text":"<p>\u8981\u5c06\u65e5\u5fd7\u53d1\u9001\u5230Google Cloud Logging\uff0c\u8bf7\u4f7f\u7528<code>GCPCloudLoggingHandler</code>\uff1a</p> <pre><code>import logkiss as logging\nfrom logkiss.handlers import GCPCloudLoggingHandler\n\n# \u83b7\u53d6\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\n# \u6dfb\u52a0GCPCloudLoggingHandler\ngcp_handler = GCPCloudLoggingHandler(\n    project_id=\"my-gcp-project\",\n    log_name=\"my-log\"\n)\nlogger.addHandler(gcp_handler)\n\n# \u8f93\u51fa\u65e5\u5fd7\nlogger.info(\"\u53d1\u9001\u5230Google Cloud Logging\u7684\u4fe1\u606f\u6d88\u606f\")\n</code></pre>"},{"location":"zh/zh/api/handlers/","title":"\u5904\u7406\u5668\u6a21\u5757","text":"<p>logkiss\u5904\u7406\u5668\u6a21\u5757\u5305\u542b\u7528\u4e8e\u5c06\u65e5\u5fd7\u53d1\u9001\u5230\u5404\u79cd\u76ee\u6807\u7684\u5904\u7406\u5668\u7c7b\u3002</p>"},{"location":"zh/zh/api/logkiss/","title":"logkiss \u6838\u5fc3\u6a21\u5757","text":"<p>logkiss\u6838\u5fc3\u6a21\u5757\u5305\u542b\u7528\u4e8e\u5f69\u8272\u65e5\u5fd7\u8f93\u51fa\u7684\u57fa\u672c\u7c7b\u548c\u51fd\u6570\u3002</p>"}]}